在 PHP 的内部维护了一个连接状态。有四种可能的状态：
    0 - NORMAL（正常）
    1 - ABORTED（中止）
    2 - TIMEOUT（超时）
    3 - ABORTED and TIMEOUT（中止和超时）

当一个 PHP 脚本正常运行时，NORMAL 状态是激活的。如果远程客户端断开连接，那么将打开 ABORTED 状态标志。远程客户端断开连接通常是由用户按下
STOP 按钮引起的。如果触发了 PHP 施加的时间限制（参见 set_time_limit()），那么将打开 TIMEOUT 标志。

你可以决定客户机断开连接是否会导致脚本中止。有时，让你的脚本总是运行到完成是很方便的，即使没有远程浏览器会接收其输出。然而，默认的行为是当远程
客户端断开连接时，你的脚本也将中止。这种行为可以通过 php.ini 指令 ignore_user_abort 来设置，也可以通过对应的 Apache httpd.conf 指令
php_value ignore_user_abort 或 ignore_user_abort() 函数来设置。如果你没有告诉 PHP 去忽略用户中止，那么你的脚本将会中止。一个例外是，
如果你已经使用 register_shutdown_function() 注册了一个关闭函数。具有一个关闭函数，当远程用户击中了他的 STOP 按钮时，下次你的脚本尝试输出
一些东西时，PHP 将会检测到连接已经被中止并且会调用关闭函数。在你的脚本正常结束的末尾，也会调用该终止函数，因此为了在客户端断开连接的情况下去
做一些不同的事情，你可以使用 connection_aborted() 函数。如果连接被中止，该函数会返回 TRUE 。

你的脚本也可以被内置的脚本计时器终止。默认的超时时间是 30 秒。可以使用 php.ini 指令 max_execution_time 或对应的 Apache httpd.conf 指
令 php_value max_execution_time 以及 set_time_limit() 函数来更改它。当计时器过期时，脚本将会被中止；并且与上述的客户端断开连接的情况
一样，如果已经注册了一个关闭函数，它也将会被调用。在这个关闭函数中，你可以通过调用 connection_status() 函数来检查是否是一个超时引发了这次
对关闭函数的调用。如果确实是一个超时引发了关闭函数被调用，那么这个函数将会返回 2 。

需注意的一点是，ABORTED 状态和 TIMEOUT 状态可以同时被激活。如果你告诉 PHP 去忽略用户中止，那么这是可能的。PHP 仍然会注意到用户可能破坏了
连接的事实，但脚本将继续运行。如果它随后触发了时间限制，它将被中止并且关闭函数（如果有的话）将被调用。此时，你会发现 connection_status()
返回的是 3。个人补充：虽然第一眼看上去，3 不合理，但是仔细想想，还是有一定的存在价值的。
