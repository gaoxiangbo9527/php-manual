PHP 的命名空间实现会受其作为动态本质的编程语言的影响。

因此，为了将下面的示例代码：
    <?php
    class classname
    {
        function __construct()
        {
            echo __METHOD__,"\n";
        }
    }
    function funcname()
    {
        echo __FUNCTION__,"\n";
    }
    const constname = "global";

    $a = 'classname';
    $obj = new $a; // prints classname::__construct
    $b = 'funcname';
    $b(); // prints funcname
    echo constant('constname'), "\n"; // prints global
转换成命名空间的代码，你需要使用全限定名：
    <?php
    namespace namespacename;
    class classname
    {
        function __construct()
        {
            echo __METHOD__,"\n";
        }
    }
    function funcname()
    {
        echo __FUNCTION__,"\n";
    }
    const constname = "namespaced";

    /* note that if using double quotes, "\\namespacename\\classname" must be used */
    $a = '\namespacename\classname';
    $obj = new $a; // prints namespacename\classname::__construct
    $a = 'namespacename\classname';
    $obj = new $a; // also prints namespacename\classname::__construct
    $b = '\namespacename\funcname';
    $b(); // prints namespacename\funcname
    $b = 'namespacename\funcname';
    $b(); // also prints namespacename\funcname
    echo constant('\namespacename\constname'), "\n"; // prints namespaced
    echo constant('namespacename\constname'), "\n"; // also prints namespaced
注意，因为在一个动态的类名、函数名和常量名内，一个限定名和全限定名是没有区别的，所以开头的反斜线不是必须的。
个人补充：上面的例子说明，字符串中的名字进行解析时不会相对于当前命名空间，而是基于全局空间的，所以开头的反斜线是可以省略的。
