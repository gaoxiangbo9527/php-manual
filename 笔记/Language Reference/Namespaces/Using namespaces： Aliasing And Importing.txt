通过别名或者导入去引用一个外部的全限定名称的能力是命名空间的一个重要特性。这类似于基于 unix 文件系统去创建到其它文件或目录的符号连接的能力。

所有支持命名空间的 PHP 版本均支持三种别名或者导入：为类名起别名、为接口名起别名以及为命名空间名起别名。
PHP 5.6+ 也允许为函数或常量起别名或者导入它们。
    use function ...
    use const ...

在 PHP 中，别名是通过 use 操作符来实现的。

注意，对于（use 中的）命名空间中的名称（包含命名空间分隔符的全限定名，如 Foo\Bar 以及相对的不包含命名空间分隔符的全局名称，如 FooBar）来说
，前导的反斜杠是不必要的，也是不推荐的，因为导入的名称必须是全限定的，不会相对当前的命名空间进行处理。
PHP 还支持一种在同一行中放置多个 use 语句的快捷方式。（个人补充：不是多个 use 语句，而是一个 use 关键字和多个逗号分隔的声明）

导入是在编译时执行的，因此不会影响动态的类名、函数名和常量名（个人补充：因为它们是运行时执行的）。
另外，导入只影响非限定名和限定名。全限定名是绝对的，故不受导入的影响。

导入的作用域规则
    use 关键字必须被声明位于一个文件的最外层作用域（即全局作用域）中或者位于命名空间声明中。这是因为导入操作是在编译时而不是运行时完成的，所
    以它不能在块作用域中。
    注意
        导入规则是基于每个文件的，这意味着被包含的文件不会继承父文件的导入规则。
        个人补充：个人猜测所谓的导入就是编译时的替换，而且 use 的替换是早于 include 的，而且一旦导入完成，use 语句已经被删除了，只留下导
        入后的完整名称了，说不定此时连 namespace 声明和关键字也被删除了。

分组使用 use 声明
    从 PHP 7.0 开始，来自相同命名空间的类、函数和常量可以被分组到一条单独的 use 语句中。
    个人补充：注意是按类别分组，组内只能是同一类的元素，即类只能和类在一组内，函数只能和函数在一组内，不能混合。
