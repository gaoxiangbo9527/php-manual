有时能够拥有可变化的变量名是很方便的。可变化的变量名是一个可以动态设置和使用的变量名。
个人补充：下文统一使用 可变变量 这个名词。

一个可变变量接受一个变量的值作为该可变变量的变量名。
    $a = 'hello';
    $$a = 'world'; 或者 ${$a} = 'world';
    echo "$a ${$a}"
个人补充：PHP 为可变变量增加了 {} 解析规则，所以上面的 echo "$a ${$a}" 语句中的 ${$a} 是字符串的简单变量解析，而不是字符串的复杂变量解析。

为了使用数组的可变变量，你必须解决一个二义性问题。那就是，如果你写了 $$a[1] ，解析器需要知道是否你本打算使用 $a[1] 作为一个变量，还是你期望
$$a 作为一个变量然后 [1] 从该变量中进行索引。解决这个二义性的语法是：
    第一种情况使用：${$a[1]}
    第二种情况使用：${$a}[1]

类的属性也可以通过可变属性名来访问，例如：$foo->$bar 。可变属性名将在该调用所处的作用域内被解析。
可使用花括号来清晰的给属性名定界。最有用是在属性位于数组中，或者属性名包含有多个部分或者属性名包含有非法字符时。
    $foo->{$baz[1]}
    $foo->{$a . $b}
    $foo->{1}

个人补充：{$a . $b} 不仅可以用在数组的可变变量中，普通的可变变量也可以用，比如 ${$a . $b} = 'hello'; 。

小心
    对是数组的变量属性的进一步解引用在 PHP 5 和 PHP 7 之间具有不同的语义。PHP 7.0 的迁移指南 包含了关于已发生变化的表达式类型的更详细的信
    息，以及如何放置大括号以避免歧义。
    个人补充：PHP 5 可以认为是从右向左解析，但不完全是；而 PHP 7 完全是从左向右解析。

警告
    在函数或者类方法内部，可变变量不能同超全局变量一起使用。
    $this 是一个特殊的变量，它也不能被动态的引用。
