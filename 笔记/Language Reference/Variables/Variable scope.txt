变量的作用域即定义该变量的上下文（环境）。大部分的 PHP 变量只有一个单一的作用域。这个单一的作用域包含被 include 和 require 引入的文件。

在用户自定义的函数中，一个局部的函数作用域将被引入。默认情况下，在一个函数内部用到的任何变量都会被限制在这个局部的函数作用域之内。
你会注意到这和 C 语言有一点点不同，在 C 语言中，全局变量在函数内自动可用，除非被一个局部定义覆盖掉。这可能会引起一些问题，有些人可能不小心就
改变了一个全局变量。在 PHP 中，如果要在函数内使用一个全局变量，它必须在该函数内被声明为全局的。

global 关键字
    第一种访问全局作用域中的变量的方法是使用 global 关键字。
    第二种访问全局作用域中的变量的方法是使用特殊的 PHP 预定义的 $GLOBALS 数组。
    注意，$GLOBALS 存在于任何作用域内，这是因为 $GLOBALS 是一个超全局变量。

    注意
        在函数外面使用 global 关键字并不是错误的，如果一个文件被是在一个函数中被包含进去的，就可以这么用。

使用静态变量
    变量作用域的另一个重要的特性就是 static 变量。静态变量仅在存在于局部的函数作用域中，但当程序执行离开该作用域时，静态变量的值并不会丢失。

    静态变量还提供了一种处理递归函数的方法。

    注意
        从 PHP 5.6 开始，你可以将表达式的结果赋值给静态变量，但是此时该表达式中不能使用任何函数，这么做会导致解析错误。
        个人补充：应该是常量表达式就可以。

    注意
        静态（变量）声明是编译时进行解析的。

    个人补充：静态声明是在编译时进行解析的，并且应该绑定到了函数定义的作用域中，并且同时会初始化（如果有的话）。而后续每次调用该函数时，会直
    接在该函数调用的局部作用域中声明一个和该静态变量同名的局部变量，而且该局部变量是该静态变量的引用。

全局变量和静态变量的引用
    PHP 根据引用实现了变量的 static 和 global 修饰符。例如，在函数作用域中使用 global 语句导入一个真正的全局变量，实际上是创建了一个对该
    全局变量的引用。这种实现方式可能会导致不希望的行为，比如：
        <?php
        function test_global_ref() {
            global $obj;
            $temp = new stdclass
            $obj = &$temp;
        }

        function test_global_noref() {
            global $obj;
            $obj = new stdclass;
        }

        test_global_ref();
        var_dump($obj);
        test_global_noref();
        var_dump($obj);
    static 声明也会应用和上例中相似的行为。
