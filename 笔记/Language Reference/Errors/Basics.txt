PHP 用报告错误的形式去响应许多的内部错误条件。这些错误可以用来标识许多不同的情况，并且根据需要可以被显示和（或）记录日志。
PHP 生成的每一个错误都包含一个类型，有一份 这些类型 的清单可用，还有它们的行为以及如何能引发它们的简短描述。

使用 PHP 处理错误
    如果没有设置错误处理程序，那么 PHP 会按照它的配置处理每一个发生的错误。
    哪些错误会被报告以及哪些错误会被忽略由 php.ini 中的 error_reporting 指令控制，也可以通过在运行时调用 error_reporting() 函数来控制。
    但是，强烈建议设置 error_reporting 配置指令，因为在脚本开始执行之前就可能会发生一些错误。

    在开发环境中，你总是应当把 error_reporting 设置为 E_ALL ，因为你需要发现并且修复 PHP 引发的问题。
    在生产环境中，你可能希望将其设置为一种不详尽的级别，例如 E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED ，但在许多情况下 E_ALL 仍是
    适合的，因为它可以提供潜在问题的早期警告。

    PHP 会如何处理这些错误取决于另外两个 php.ini 指令。
         display_errors 会控制是否将错误作为脚本输出的一部分显示。
         在生产环境中总是应当禁用它，因为这些错误会包含机密信息，比如数据库密码。
         但在开发环境中启用它确很有用，因为它能确保及时的报告问题。

         除了显示错误，当 log_errors 指令启用时 PHP 还能记录这些错误。
         这将会把任何错误都记录到由 error_log 定义的文件或者 syslog 。
         这在生产环境中非常的有用，因为你可以记录发生的所有错误，然后根据这些错误生成报告。

用户错误处理程序
    如果 PHP 默认的错误处理不合适，你还可以通过 set_error_handler() 去安装你自己自定义的错误处理程序去处理许多种类型的错误。
    虽然一些错误类型不能通过这种方式处理，然而那些可以被处理的错误类型就能按照你的脚本认为合适的方式被处理：举例来说，这可以用来向用户显示一个自定义
    的错误页面并且还能比通过日志更直接地进行报告，比如通过发送一封电子邮件。
