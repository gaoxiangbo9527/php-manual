PHP 表达式是最重要的构建块。在 PHP 中，你编写的所有内容几乎都是表达式。简单却最精确的定义一个表达式的方式就是“任何有值的东西”。

最基础的表达式的形式是常量和变量。当你输入 "$a = 5" 时，你就把 '5' 赋值进了变量 $a 。'5'，很明显，拥有值 5 ，或者换句话说 '5' 是一个带有
值 5 的表达式（在本例中，'5' 是一个整数常量）。

在该赋值之后，你期望 $a 的值也是 5，所以如果你写了 $b = $a，你会期望它的表现和你写的 $b = 5 一样。换句话说，$a 也是一个值为 5 的表达式。
如果一切顺利，这就是将要发生的事情。

稍微复杂一点的表达式示例是函数。例如，考虑下面这个函数：
    <?php
    function foo ()
    {
        return 5;
    }

假设你熟悉函数的概念（如果你还不熟悉，看一下关于函数的那一章）。你可以假设输入 $c = foo() 本质上就像编写 $c = 5 一样，你是对的。函数是带有
它的返回值的表达式。既然 foo() 返回 5 ，'foo()' 表达式的值就是 5 。通常函数不会仅仅返回一个静态的值而是计算一些事情。

当然，PHP 中的值不必须是整数，并且他们还经常不是。PHP 支持四种标量值的类型：整型值，浮点值，字符串值和布尔值（标量值是指那些你不能再“分割”
成更小块的值，与数组不同，例如）。PHP 也支持两种复合（非标量）类型：数组和对象。这些值类型中的每一个都可以赋值进变量或者从函数返回。

PHP 在表达式方面更近一步，就像许多其他语言一样。PHP 是一个面向表达式的语言。从这个意义上说，几乎所有的东西都是一个表达式。考虑我们已经处理过
的例子，'$a = 5' 。很容易看出这里涉及两个值，整数常量 '5' 的值，以及值也将被更新为 5 的 $a 。但事实是这里还涉及到一个额外的值，那就是赋值
本身的值。赋值本身被求值为被赋予的值，在本例中即 5 。实际上，它意味着 '$a = 5' ，不管它做什么，都是一个值为 5 的表达式。因此，编写
'$b = ($a = 5)' 就像写 '$a = 5;$b = 5;'（分号标志语句的结束）。因为赋值是按从右到左的顺序解析的，所以你还可以编写 '$b = $a = 5' 。

面向表达式的另一个好例子是前置以及后置的递增和递减。PHP 和许多其他语言的用户可能会更熟悉 variable++ 和 variable-- 表示法。它们是递增和
递减操作符。在 PHP 中，类似 C，有两种类型的增加 —— 前置增加和后置增加。前置和后置增加本质上都会增加变量的值，并且对变量的影响是相同的。不同
的是递增表达式的值。前置增加，即写为 '++$variable' ，求值为递增后的值（PHP 在读取变量值之前递增该变量，因此名称为 “前置递增”）。后置递增
，写为 '$variable++'，求值为 $variable 原始的值，在它被递增之前（PHP 在读取变量的值之后递增该变量，因此名为“后置递增”）。

一种非常普通类型的表达式是比较表达式。这些表达式求值为 TRUE 或者 FALSE 。PHP 支持 >（大于）、>=（大于或等于）、==（等于）、!=（不等于）
、<（小于）和<=（小于或等于）。本语言还支持一组严格的等价操作符：===（等于且类型相同）和 !==（不等于或类型不同）。这些表达式最经常被用在条
件执行中，比如 if 语句中。

我们将在这里处理的最后一个表达式的例子是 组合赋值操作符 表达式。你已经知道，如果你想要增加 1 到 $a ，你可以简单的编写 '$a++' 或 '++$a'。
但是如果你想要增加不止 1 给它，例如 3 ，你可以编写 '$a++' 多次，但是很显然这不是一种很有效率或者舒服的方式。一种更加常见的做法是编写
'$a = $a + 3' 。'$a + 3' 求值为 $a 的值加 3 ，然后赋值回 $a ，这会导致 $a 增加 3 。在 PHP 中，和其他许多类似 C 的语言，你可以以一种
更短的方式来编写。随着时间的推移，这种写法也会变得更清晰、更容易理解。在 $a 的当前值上加上 3 可以写成 '$a += 3' 。这意味着 “取 $a 的值，
加上 3，再把它赋回 $a ”。除了更短和更清晰，这也会导致执行的更快。'$a += 3' 的值，像常规赋值的值，是被赋予的值。注意那不是 3 ，而是 $a +
3 的值（这就是赋值给 $a 的值）。任何二元运算符都可以在这种操作符赋值模式中使用，例如 '$a -= 5'（$a 的值减去 5），'$b *= 7' （$b 的值乘
以7），等等。

还有一种看起来可能有些奇怪的表达式，如果你在其他语言中没有见过它的话，即三元条件操作符：
    <?php
    $first ? $second : $third
如果第一个子表达式的值为 TRUE （非0），那么第二个表达式会被求值，并且那会是该条件表达式的值。否则，第三个子表达式会被求值，并且那会是该表达
式的值。

一些表达式可以被认为是语句。这种情况下，一条语句的形式为 'expr;' ，即表达式后跟着一个分号。在 '$b = $a = 5;' 中，'$a = 5' 是一个有效的
表达式，但它本身不是一条语句。'$b = $a = 5;' 才是一条有效的语句。

最后值得一提的是表达式的真假值。在许多事件中，主要是在条件执行和循环中，你对表达式中的特定值并不感兴趣，却只关心它是 TRUE 还是 FALSE 。常量
TRUE 和 FALSE （大小写不敏感的）是两个可能的布尔值。当需要时，一个表达式会自动的转换为布尔值。有关如何进行类型转换的详细信息，请参阅关于类
型转换的章节。

PHP 提供了表达式的一套完整和强大的实现，并且完全记录它已经超出了文档的范围。上面的例子会让你对表达式是什么以及如何构造有用的表达式有一个很好
的概念。贯穿本手册中的其余部分，我们将编写 expr 去表示任何有效的 PHP 表达式。
