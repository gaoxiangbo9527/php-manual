一旦常量被定义，那么就不能更改其值或者取消定义。
如同超全局变量，常量的作用域也是全局的。

define() 函数
    使用 define() 函数定义常量时
        PHP 7.0.0 以前，可以使用任意的标量和标量表达式。
        PHP 7.0.0 以后，还也可以使用数组。
    使用 define() 函数定义的常量不一定是大小写敏感的。
const 关键字
    在 PHP 5.3.0 以后，才可以使用 const 关键字在类定义以外定义常量。
    当使用 const 关键字定义常量时
        PHP 5.6.0 以前，该常量只能使用标量值（布尔型、整型、浮点型和字符串）赋值；
        PHP 5.6.0 以后，除了可以使用标量值以外，还可以使用标量表达式和数组；
    使用 const 关键字定义的常量总是大小写敏感的。
不论使用何种方式定义常量，常量的值还可以是资源，但是要避免这么做，因为这么做会引发不期望的结果。
注意
    和 define() 函数相反，使用 const 关键字定义的常量必须在顶级作用域中，因为使用 const 关键字定义常量实在编译时进行的；
    这也就意味着不能在函数内，循环内、 if 语句内以及 try/catch 语句块内用 const 来定义常量。

使用常量的名字就可以取得其值，与变量不同，不应该在常量名前面加上 $ 符号。
也可以用 constant() 函数来获取常量的值，不过一般只在需要动态的获取常量名时才使用这种方法。
使用 get_defined_constants() 函数可以获取所有已经定义的常量。
如果你使用了一个未定义的常量：
    PHP 7.2.0 以前，PHP 会假设你调用该常量名对应的字符串，并且会抛出 E_NOTICE 级别的错误。
    （例如如果调用未定义的 CONSTANT 常量，最终会被当作"CONSTANT"字符串）。
    PHP 7.2.0 以后，PHP 会抛出 E_WARNING 级别的错误。
上述规则不适用于完整限定的常量，如果使用的完整限定的常量不存在，则直接抛出致命错误。

如果要检查一个常量是否已经定义，请使用 defined() 函数。

注意
    常量和变量是存在于不同的名称空间中的。
