通过使用 define() 函数或者从 PHP 5.3.0 开始通过在一个类定义之外使用 const 关键字，你就能定义一个常量。虽然 define() 允许将常量定义为任
意表达式，然而 const 关键字却有限制。一旦常量被定义，那么就不能更改其值或者取消定义。

如同超全局变量，常量的作用域也是全局的。

define() 函数
    使用 define() 函数定义常量时
        PHP 7.0.0 以前，可以使用任意的标量和标量表达式。
        PHP 7.0.0 以后，还也可以使用数组。
const 关键字
    在 PHP 5.3.0 以后，才可以使用 const 关键字在类定义以外定义常量。
    当使用 const 关键字定义常量时
        PHP 5.6.0 以前，该常量只能使用标量值（布尔型、整型、浮点型和字符串）赋值；
        PHP 5.6.0 以后，除了可以使用标量值以外，还可以使用标量表达式和数组；
不论使用何种方式定义常量，常量的值还可以是资源，但是要避免这么做，因为这么做会引发不期望的结果。

个人总结：
    从 PHP 7.0.0 开始，可以使用标量值、标量表达式和数组定义常量；也可以使用资源，但是不推荐；应该也可以使用 null ，但是也没实际意义；不允
    许使用对象。



使用常量的名字就可以取得其值，与变量不同，不应该在常量名前面加上 $ 符号。你也可以用 constant() 函数去读取一个常量的值，不过一般只在需要动态
的获取常量名时才使用这种方法。使用 get_defined_constants() 可以获取所有已经定义的常量。

注意：常量和（全局）变量存在于不同的名称空间中。这意味着，例如 TRUE 和 $TRUE 通常是不同的。

如果你使用了一个未定义的常量：
    PHP 7.2.0 以前，PHP 会假设你调用该常量名对应的字符串，并且会抛出 E_NOTICE 级别的错误。
    （例如如果调用未定义的 CONSTANT 常量，最终会被当作"CONSTANT"字符串）。
    PHP 7.2.0 以后，PHP 会抛出 E_WARNING 级别的错误。
上述规则不适用于完整限定的常量，如果使用的完整限定的常量不存在，则直接抛出致命错误。

如果要检查一个常量是否已经定义，请使用 defined() 函数。


注意：和使用 define() 定义常量相反，使用 const 关键字定义的常量必须声明在顶级作用域中，因为它们是在编译时被定义的；这也就意味着它们不能在函
数内，循环内、 if 语句内或者 try/catch 块内被定义。

注意：使用 const 关键字定义的常量总是大小写敏感的，然而使用 define() 定义的常量可以是大小写不敏感的。

另请参阅 类常量 。
