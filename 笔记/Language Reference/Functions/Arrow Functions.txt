个人总结：
    箭头函数只是语法糖。
    PHP 箭头函数的语法不算是特别简练；如果把参数类型、返回值类型、默认值、变长函数和按引用传递和返回考虑进来，已经没多精简了，看上去也很别扭，
    实用性打打折扣（看看示例 3 就能体会到了）；且复杂的箭头函数会让代码的结构和意图变得模糊，可读性低。
    箭头函数比较适合无类型声明的、面向过程的函数，比如 js；而当下 PHP 主流是面向对象编程，面向过程占比非常小。
    总结来说，建议只在匿名函数自身足够简单时才用箭头函数；不要遇到匿名函数即尝试改成箭头函数，这样往往会适得其反。

PHP 7.4 中引入了箭头函数，作为 匿名函数 的一种更简洁的语法。

匿名函数和箭头函数都是使用 Closure 类实现的。

箭头函数有基本的形式 fn (argument_list) => expr 。

箭头函数支持与 匿名函数 相同的特性，除了总是自动的使用来自父作用域的变量。

当表达式中使用的变量是在父作用域中定义的，它将隐式的按值捕获。在下面的示例中，函数 $fn1 和 $fn2 的行为方式相同。

Example #1 箭头函数自动的按值捕获变量。
    <?php

    $y = 1;

    $fn1 = fn($x) => $x + $y;
    // equivalent to using $y by value:
    $fn2 = function ($x) use ($y) {
        return $x + $y;
    };

    var_export($fn1(3));
    ?>

上面的例子将输出：
    4

这也适用于嵌套的箭头函数：

Example #2 箭头函数自动的按值捕获变量，即使是嵌套的
    <?php

    $z = 1;
    $fn = fn($x) => fn($y) => $x * $y + $z;
    // Outputs 51
    var_export($fn(5)(10));
    ?>

类似于匿名函数，箭头函数的语法允许任意的函数签名，包括参数和返回值类型，默认值，变长函数以及按引用传递和返回。以下所有内容都是有效的箭头函数示
例：

Example #3 箭头函数的示例
    <?php

    fn(array $x) => $x;
    static fn(): int => $x;
    fn($x = 42) => $x;
    fn(&$x) => $x;
    fn&($x) => $x;
    fn($x, ...$rest) => $rest;

    ?>

箭头函数使用按值变量绑定。这大致相当于对箭头函数中所使用的每个（继承）变量 $x 执行 use($x) 。按值绑定意味着不可能修改来自外部作用域的任何值。
可以使用 匿名函数 来代替进行按引用绑定。

Example #4 来自外部作用域的值不能被箭头函数修改
    <?php

    $x = 1;
    $fn = fn() => $x++; // Has no effect
    $fn();
    var_export($x);  // Outputs 1

    ?>

更新日志
    版本     描述
    7.4.0   箭头功能开始可用。

注意事项
    注意：可以在箭头函数中使用 func_num_args()、func_get_arg() 和 func_get_args()。
