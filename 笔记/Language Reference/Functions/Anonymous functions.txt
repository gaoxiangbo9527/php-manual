匿名函数，也被称为闭包，允许创建没有指定名称的函数。它们作为 callback 的值时最有用，但是它们也有很多其他的用途。

匿名函数是使用 Closure 类实现的。

闭包也能用作变量的值。PHP 自动的将这样的表达式转换为内部类 Closure 的实例。
将闭包赋值给一个变量使用同其他任何赋值语句一样的语法，要包含结尾的分号。

闭包还可以从父作用域继承变量。所有这样的变量必须使用 use 语言结构传递。
从 PHP 7.1 起，这些变量一定不能包括 超全局变量 和 $this ，也不能是与参数同名的变量。
来自示例
    继承的变量的值来自于定义匿名函数时，而不是调用匿名函数时。
    在匿名函数定义之后
        按值传递的继承变量的改变不会影响父作用域中的变量，父作用域中变量的改变也不会影响继承变量。
        按引用传递的继承变量则会互相影响。
    匿名函数也能接受常规的参数。

从父作用域继承的变量与使用全局变量是不同的。全局变量存在于全局作用域中，无论正在执行什么函数，全局变量都是相同的。
闭包的父作用域是声明闭包时所在的函数（不一定是调用闭包的函数）。

从 PHP 5.4.0 开始，当在类的上下文中声明匿名函数时，当前类将自动绑定到它，使得 $this 在该匿名函数范围内可用。
如果不想要这种自动的绑定到当前类，则可以使用 静态匿名函数。

静态匿名函数
    从 PHP 5.4.0 开始，匿名函数可以被声明为静态的。这会阻止当前类（个人补充：应该是对象）自动的绑定到该匿名函数。
    对象也不可以在运行时被绑定到静态匿名函数。

匿名函数的个人总结
    匿名函数相比于非匿名函数，匿名函数的核心是 作用域延申，而 作用域延申 是通过 继承变量，绑定到对象，绑定到类 实现的。
    其中 继承变量 对于非静态匿名函数和静态匿名函数没区别，继承变量的注意点上面都有，这里不再重复。
    绑定的对象不一定就是绑定的类的实例，也可以是绑定的类的子类的实例，或者二者不存在 instanceof 关系，总之很灵活。
    非静态匿名函数和静态匿名函数的主要区别体现在 绑定到对象 和 绑定到类 上，具体如下：
        非静态匿名函数
            非静态匿名函数和类的实例方法十分接近。
            都既可以访问类的数据，也可以访问实例的数据。所以即能 绑定到类，又能 绑定到对象。还可以在运行时绑定或切换 绑定的类 和 绑定的对象。
            能访问对象的数据，可以使用 $this 。

            在类上下文外定义
                默认没有绑定类和绑定对象，可以在运行时绑定。
                如果不需要绑定到对象，那推荐声明为静态匿名函数。
            在类上下文中定义
                默认绑定到当前类和当前对象，可以在运行时更换。
                如果不需要绑定到对象，那推荐声明为静态匿名函数。
        静态匿名函数
            静态匿名函数和类的静态方法十分接近。
            都属于类，而不属于实例。所以只能 绑定到类，而不能 绑定到对象。不能在运行时 绑定到对象，但可以在运行时绑定或切换 绑定的类 。
            都只能访问类的数据，而不能访问对象的数据，也就不能使用 $this 。

            在类上下文外定义
                默认并没有绑定类，可以在运行时绑定。
            在类上下文中定义
                默认绑定到当前类，可以在运行时更换。

更新日志
    版本	        描述
    7.1.0	    匿名函数不可以遮盖超全局变量，$this 以及任何同参数同名的变量。
    5.4.0	    匿名函数中可以使用 $this ，而且也可以被声明为静态的。
    5.3.0	    可以使用匿名函数。

注意事项
    注意：可以在闭包中使用 func_num_args()、func_get_arg() 和 func_get_args() 。
