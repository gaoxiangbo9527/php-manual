参数列表是一个逗号分隔的表达式列表，参数是从左向右求值的。

PHP 支持参数值按值传递（默认），按引用传递以及默认参数值。也支持可变长度的参数列表。

按引用传递参数
    默认情况下函数参数是按值传递的，因此如果参数的值在函数内被改变，在函数外部它的值并不会发生改变。为了能让函数修改它的参数，这些参数必须按
    引用传递。
    为了能让一个函数的参数总是按引用传递，在函数定义中该参数名的前面放置一个 & 符号。

默认参数值
    一个函数可以为标量类型的参数定义 C++ 风格的默认值。
    PHP 也允许使用数组和特殊类型的 NULL 作为默认值。
    默认值必须是一个常量表达式，比如不能是一个变量，一个类成员或者一个函数调用。
    注意当使用默认参数时，任何有默认值的参数必须在所有没有默认值的参数的右侧，否则事情不会像预期的那样进行。
    注意：从 PHP 5 开始，按引用传递的参数也可以有一个默认值。

类型声明
    注意：类型声明在 PHP 5 中也被称为类型提示。

    类型声明允许函数在 调用时 要求参数具有特定的类型，如果给定的值是不正确的类型，则生成一个错误：
        在 PHP 5 中，这将是一个可恢复的致命错误；
        然而 PHP 7 会抛出一个 TypeError 类型的异常。
    要指定类型声明，应在参数名称之前添加类型名称。如果参数的默认值设置为 NULL，则可以使声明接受 NULL 值。
    个人补充：虽然本节手册中没说，但是在函数参数上使用 ? 也是有效果的，含义和返回值类型声明中的 ? 一致，个人觉得暂时还是先别这种语法，如果需
    要允许为 null 值，像上面的那样做。

    有效的类型
        类型              描述                                                          最低 PHP 版本
        类名或接口名       参数必须是给定类名或接口名的 instanceof                            5.0.0
        self             参数必须是方法定义所在的类的 instanceof                            5.0.0
        array            参数必须是一个数组                                                5.1.0
        callable         参数必须是一个有效的 callable                                     5.4.0
        bool             参数必须是一个布尔值                                              7.0.0
        int              参数必须是一个整数                                                7.0.0
        float            参数必须是一个浮点数                                              7.0.0
        string           参数必须是一个字符串                                              7.0.0
        iterable         参数必须是一个数组或者是 Traversable 的 instanceof                 7.1.0
        object           参数必须是一个对象                                                7.2.0

        警告
            不支持上述标量类型的别名，相反，它们（这些别名）会被视为类名或接口名。
            例如，使用 boolean 作为参数类型或返回类型将需要参数或返回值是 boolean 类或接口的 instanceof，而不是 bool 类型。

严格类型
    默认情况下，如果可能，PHP 将把错误类型的值强制转换为期望的 标量 类型。
    可以在 每个文件的范围内 启用严格模式。
    在严格模式下，只接受类型和类型声明精确匹配的变量，否则就会抛出一个 TypeError 。该规则唯一的例外就是一个整数可以被赋给一个期望浮点数的函
    数参数。
    个人补充：因为严格模式是 PHP 7.0.0 新增的，所以只会有 TypeError 。
    内部函数中的函数调用不会受到 strict_types 声明的影响。
    要启用严格模式，declare 语句与 strict_types 指令一起使用。
    小心：启用严格模式也会影响 返回类型声明 。
    注意
        严格类型是应用于启用了严格模式的文件中的发起 函数调用 的代码，而不是这个文件中声明的函数。
        如果在没有启用严格类型的文件中调用了在具有严格类型的文件中定义的函数，则调用者的偏好(弱类型)将得到尊重，并强制执行该值。
    注意
        严格类型仅为标量类型声明定义，而且需要 PHP 7.0.0 或更高版本，是因为 PHP 7.0.0 才新增了标量类型声明。
        个人补充：strict_types 指令也是 7.0.0 新增的。

可变长度的参数列表
    PHP 在用户定义的函数中支持可变长度的参数列表。在 PHP 5.6 及以后的版本中是使用 ... 标识实现的。在 PHP 5.5 及之前的版本中是使用
    func_num_args()、func_get_arg() 和 func_get_args() 函数实现的。

    PHP 5.6+ 中的 ...
        在 PHP 5.6 及以后的版本中，参数列表可能包括 ... 记号，表示函数接受可变数量的参数。这些参数会以数组的形式传递到给定的变量中。

        调用函数时，你也可以使用 ... 去将数组变量或字面量、Traversable 变量或字面量拆分到参数列表中。
        个人补充：此时数组中的元素数量超过参数数量也没关系，多余的会被忽略。

        你可以在 ... 之前指定常规的位置参数。在这种情况下，只有与位置参数不匹配的尾随参数才会被添加到由 ... 生成的数组中。

        在 ... 记号之前能够添加一个类型声明，如果这么做了，那么所有被 ... 捕获的参数必须是提示类的对象。

        你也可以通过在 ... 之前加上一个 & 来按引用传递可变的参数。

    在较老版本的 PHP 中
        并不需要特殊的语法（指的是 ...）来说明函数是可变的。但访问函数的参数必须使用 func_num_args()、func_get_arg() 和
        func_get_args()。
