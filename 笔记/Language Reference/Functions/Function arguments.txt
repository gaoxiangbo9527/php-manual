Type declarations
    注意
        类型声明在PHP5中也被称为类型提示。

    类型声明允许函数在 调用时 要求参数具有特定的类型，如果给定的值是不正确的类型，则生成一个错误：
        在 PHP 5 中，这将是一个可恢复的致命错误；
        然而 PHP 7 会抛出一个 TypeError 类型的异常。
    要指定类型声明，应在参数名称之前添加类型名称。如果参数的默认值设置为 NULL，则可以使声明接受 NULL 值。

    有效的类型
        类型              描述                                                          最低 PHP 版本
        类名或接口名        参数必须是给定类名或接口名的 instanceof                            5.0.0
        self             参数必须是方法定义所在的类的 instanceof                            5.0.0
        array            参数必须是一个数组                                               5.1.0
        callable         参数必须是一个有效的 callable                                     5.4.0
        bool             参数必须是一个布尔值                                              7.0.0
        int              参数必须是一个整数                                               7.0.0
        float            参数必须是一个浮点数                                              7.0.0
        string           参数必须是一个字符串                                              7.0.0
        iterable         参数必须是一个数组或者是 Traversable 的 instanceof                 7.1.0
        object           参数必须是一个对象                                                7.2.0

        警告
            不支持上述标量类型的别名，相反，它们（这些别名）会被视为类名或接口名。
            例如，使用 boolean 作为参数类型或返回类型将需要参数或返回值是 boolean 类或接口的 instanceof，而不是 bool 类型。

Strict typing
    默认情况下，如果可能，PHP 将把错误类型的值强制转换为期望的 标量 类型。
    可以在 每个文件的范围内 启用严格模式。
    在严格模式下，只接受类型和类型声明精确匹配的变量，否则就会抛出一个 TypeError 。该规则唯一的例外就是一个整数可以被赋给一个期望浮点数的函数参数。
    （个人补充）因为严格模式是 PHP 7.0.0 新增的，所以只会有 TypeError 。
    内部函数中的函数调用不会受到strict_types声明的影响。
    要启用严格模式，declare 语句与 strict_types 指令一起使用。
    警示：启用严格模式也会影响返回值声明。
    注意
        严格类型是应用于启用了严格模式的文件中的发起 函数调用 的代码，而不是这个文件中声明的函数。
        如果在没有启用严格类型的文件中调用了在具有严格类型的文件中定义的函数，则调用者的偏好(弱类型)将得到尊重，并强制执行该值。
    注意
        严格类型仅为标量类型声明定义，而且需要PHP 7.0.0或更高版本，是因为 PHP 7.0.0 才新增了标量类型声明。
        （个人补充）strict_types 指令也是 7.0.0 新增的。
