PHP 中的数组实际上是一个有序映射。映射是一种将值关联到键的类型。该类型针对几种不同的用途进行了优化；它可以被当做数组、列表(向量)、散列表
(一种映射的实现)、字典、集合、堆栈、队列来对待，甚至更多。由于数组的值可以是其他的数组，所以也树和多维数组也是可以的。

这些数据结构的解释超出了本手册的范围，但为它们中的每一个至少提供了一个示例。想要了解更多信息，请查阅关于这个广泛主题的大量的文献。

语法
    使用 array() 指定数组
        使用 array() 语言结构能够创建一个数组。它接受任意数量的以逗号分隔的 键=>值 对作为参数。
            array(
                key  => value,
                key2 => value2,
                key3 => value3,
                ...
            )

        最后一个数组元素后的逗号是可选的并且可以被省略。这通常用于单行的数组，即 array(1,2) 优先于 array(1,2,) 。另一方面，对于多行的数
        组通常会使用尾随逗号，因为它允许在数组末尾更容易地添加新元素。

        从 PHP 5.4 开始，你还可以使用短数组语法，它将 array() 替换为 [] 。

        键可以是整数，也可以是字符串。值可以是任何类型。

        此外，将执行以下键的强制转换：
            包含有效的十进制整数的字符串将转换为整数类型，除非数字前面有 + 号。例如，键 "8" 将实际存储在 8 下。另一方面，"08" 不会被强制
            转换，因为它不是有效的十进制整数。
            浮点数也被强制转换为整数，这意味着小数部分将被截断。例如，键 8.7 将实际存储在 8 以下。
            布尔值也被强制转换为整数，也就是说，键 true 实际存储在 1 下，键 false 存储在 0 下。
            数组和对象不能用作键。这样做将导致警告: 非法的偏移量类型。
            Null 将被转换为空字符串，即键 Null 将实际存储在 "" 下。

        如果数组声明中的多个元素使用相同的键，则只有最后一个元素将被使用，因为其他所有元素都会被覆盖。

        PHP 数组可以同时包含整数和字符串的键，因为 PHP 并不区分索引数组和关联数组。

        键是可选的。如果没有指定，PHP 将使用之前使用过的最大整数键的递增值。

        可以只为某些元素指定键，而将其他元素的键留空。

    使用方括号语法访问数组元素
        使用 array[key] 语法就能够访问数组元素。

        注意
            方括号和花括号都可以交替的用于访问数组元素。例如，$array[42] 和 $array{42} 将做相同的事情。

        从 PHP 5.4 开始，可以直接对函数或方法调用的数组结果进行数组解引用。以前只能使用临时变量。
            <?php
            function getArray() {
                return array(1, 2, 3);
            }

            // on PHP 5.4
            $secondElement = getArray()[1];

            // previously
            $tmp = getArray();
            $secondElement = $tmp[1];

            // or
            list(, $secondElement) = getArray();

        从 PHP 5.5 开始，可以对数组字面量进行数组解引用。
            $var = [1, 2, 3][1];

        注意
            尝试访问数组尚未定义的键与访问任何其他未定义的变量是相同的：将发出一条 E_NOTICE 级别的错误消息，并且结果将为 NULL 。

        注意
            对于一个非字符串的标量值进行数组解引用会静默的返回 NULL ，并且不会产生一条错误消息。

    使用方括号语法创建/修改
        可以通过显式的设置数组中的值来修改一个数组。

        这是通过在方括号中指定键去向数组赋值来实现的。键也可以省略，从而形成一对空的方括号（[]）。
            $arr[key] = value;
            $arr[] = value;
            // key 可以是一个整数或者字符串
            // value 可以是任何类型的任何值

        如果 $arr 还不存在，就会创建它，所以这也是创建数组的另一种方法。但是这种实践是不被鼓励的，因为如果 $arr 已经包含了一些值（例如，来
        自请求变量的字符串），那么这个值将待在原来的位置，而 [] 可能实际上代表的是字符串访问操作符。通过直接赋值初始化一个变量总是更好的。

        注意
            从 PHP 7.1.0 开始，对字符串应用空索引的 [] 操作符将抛出致命错误。以前，字符串被无声地转换为数组。

        要更改某个值，请使用该元素的键，并为其分配一个新值。要删除键/值对，请在其上调用 unset() 函数。

        注意
            如上所述，如果没有指定键，则取现有整数索引的最大值，新键值为该最大值加 1（但至少为 0 ），如果还没有指定过整数索引，则键为 0 。
            请注意，用于此目的的最大整数键当前不需要存在于数组中。它只需从上一次数组被重新索引后在数组中某一时刻存在过即可。

有用的函数
    有很多有用的函数可以和数组一同工作。参见 数组函数 部分。

    注意
        unset() 能够从数组中移除一个键，但要注意该数组不会被重新索引。如果需要一个真正的“删除和移位”的行为，那么可以（unset() 后再）使用
        array_values() 函数重新索引数组。

    foreach 控制结构是专门为数组而存在的。它提供了一种简单的方法去遍历数组。

Array do's and don'ts
    为什么 $foo[bar] 是错误的？
        总是应使用引号包围字符串字面量的数组索引。例如，$foo['bar'] 是正确的，而 $foo[bar] 不是。但为什么呢? 在旧脚本中经常遇到这种语法:
            <?php
            $foo[bar] = 'enemy';
            echo $foo[bar];
            // etc
        这是错误的，但它确可以工作。原因是这段代码有一个未定义的常量（bar），而不是字符串（'bar' —— 注意引号）。它能工作是因为 PHP 会自动
        将一个裸字符串（一个不与任何已知符号对应的未加引号的字符串）转换成一个包含了该裸字符串的字符串。例如，如果没有定义名为 bar 的常量，
        那么 PHP 将替换为字符串 'bar' 并使用它。

        警告 从 PHP 7.2.0开始，将未定义的常量视为裸字符串的回退已经被废弃了，因此会产生一个 E_WARNING 级别的错误。在这以前，会产生一个
        E_NOTICE 级别的错误。

        注意：这并不意味着总是要用引号包围键。不要用引号包围常量或变量的键，因为这将阻止 PHP 解释它们。

        如语法部分所述，方括号内的内容必须是表达式。这意味着这样的代码工作:
            <?php
            echo $arr[somefunc($bar)];

    那么它还有哪些坏处呢?
        在将来的某个时候，PHP 团队可能会想添加另一个常量或关键字，在其他代码中的常量可能会造成干扰。例如，以这种方式使用单词 empty 和
        default 已经是错误的，因为它们是 保留关键字。

        注意：再次重申一下，在双引号字符串中不使用引号包围数组索引是有效的，因此 “$foo[bar]” 是有效的。

转换成数组
    显式转换
        (array)
    隐式转换

    从布尔型
    从整型
    从浮点型
    从字符串
        返回一个数组，该数组只有一个元素，元素的键为 0 ，并且元素的值为被转换的标量。
        即 (array)$scalar 等价于 array($scalar) 。
    从数组
        不变
    从对象
        返回由对象属性组成的数组，键是成员变量的名字，除了几个明显的例外：整数属性不可访问，私有变量会在变量名前面加上类名，保护变量会在变量
        名前面加上一个 * 。这些前缀的两侧各有一个空字节，即 \0 。
        个人补充：不太明白这种转换规则，好像没有什么实质的用途。
    从资源
        同标量类型
    从 NULL
        空数组

比较
    通过使用 array_diff() 函数和数组操作符就能够比较数组。

数组赋值默认情况下是按值赋值的。使用引用操作符去按引用赋值一个数组。
