一个整型是集合 ℤ= {…， -2， -1, 0, 1, 2，…} 中的一个数字。

另请参阅
    任意长度的整数 / GMP
    浮点数
    任意精度 / BCMath

语法
    整型可以用十进制（以10为基数）、十六进制（以16为基数）、八进制（以8为基数）或二进制（以2为基数）表示。否定运算符可用于去表示一个负整数。

    从 PHP 5.4.0 开始可以使用二进制整型字面量。

    为了使用八进制表示法，在数字前面加上一个 0 。为了使用十六进制表示法，在数字前面加上 0x 。为了使用二进制表示法，在数字前面加上 0b 。
    个人补充：建议只用 0b 和 0x ，不用 0B 和 0X 。

    整型字面量的正式结构如下：
        decimal     : [1-9][0-9]* | 0
        hexadecimal : 0[xX][0-9a-fA-F]+
        octal       : 0[0-7]+
        binary      : 0[bB][01]+
        integer     : decimal | hexadecimal | octal | binary

    整型的大小是平台决定的。尽管大概为 20 亿的最大值是通常的值（32 位有符号整型）。64 位平台通常有一个大概 9E18 的最大值，除了在 Windows
    平台上的 PHP 7 之前，它总是 32 位的。PHP 不支持无符号整型。整型的大小可以使用常量 PHP_INT_SIZE 获取，从 PHP 5.0.5 开始可以使用常量
    PHP_INT_MAX 获取最大值，并且从 PHP 7.0.0 开始可以使用常量 PHP_INT_MIN 获取最小值。

    上文经个人整理后，大概如下：
        PHP 不支持无符号整型。

        大小（也可以认为是取值范围）
            由平台决定

            32位     20 亿左右
            64位     9E18
            Windows 平台下 PHP 7.0.0 以前，只支持 32 位，即使是在 64 位平台中。

            相关常量
                PHP_INT_SIZE    返回值表示的是字节数
                PHP_INT_MAX     >= PHP 5.0.5
                PHP_INT_MIN     >= PHP 7.0.0

    警告
        PHP 7.0.0 以前，如果向八进制整数传递了一个非法数字（比如 8 或 9），则后面其余的数字会被忽略。从 PHP 7.0.0 开始，这么做会产生解析
        错误。
        个人补充：不止八进制在这种情况下会产生解析错误，十六进制、二进制也会。

整型溢出
    如果 PHP 遇到了一个超出整型范围的数值，则会将它解释为浮点型。同样的，一个返回数值的操作的结果如果超出了整型范围，也会返回浮点型。

    PHP 中没有整除操作符。如果刚好是整除，返回值就是整数，否者的话返回值是浮点数。
    注意：从 PHP 7.0.0 开始，函数 intdiv() 可用于整除。

转换为整型
    显式转换
        (int) 或 (integer)
        intval()
    隐式转换
        如果一个操作符、函数或者控制结构需要一个整型的参数，该值会自动转换。

    从布尔型
        true    1
        false   0
    从整型
        无变化
    从浮点型
        向 0 取整
        如果浮点数的值超出了整型的表示范围，则结果未定义，因为浮点数没有足够的精度来给出精确的整数结果，而且没有任何的警告或通知。
        注意
            从 PHP 7.0.0 开始，NaN 和无穷在转换为整型时总是转换为 0 。
        警告
            不要将未知的分数强制转换为整型，这样有时会导致不可预料的结果，另请参阅 浮点数精度的警告。
    从字符串
        见字符串类型的文档。
    从资源类型
        结果是 PHP 运行时为该资源分配的唯一的资源号。
    从 NULL
        转换为 0 。
    从其他类型
        警告 转换行为未定义；不要依赖任何可见的行为，因为它可能会毫无征兆的改变。
        个人补充：部分现有行为如下：
            从数组
                空数组转换为 0 ，非空数组转换为 1 。
            从对象
                会产生一个 E_NOTICE 级别的错误并且被转换为 1 。
            从 callable
                会产生一个 E_NOTICE 级别的错误并且被转换为 1 。

