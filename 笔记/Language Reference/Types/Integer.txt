语法
    十进制、十六进制、二进制和八进制，使用负号就可以表示负数。

    从 PHP 5.4.0 开始可以使用二进制整数字面量。

    整型字面量形式上结构如下：
        integer     : decimal | hexadecimal | octal | binary
        decimal     : [1-9][0-9]* | 0
        hexadecimal : 0[xX][0-9a-fA-F]+
        octal       : 0[0-7]+
        binary      : 0[bB][01]+

        （个人补充）建议只用 0b 和 0x ，不用 0B 和 0X 。

    PHP 不支持无符号整数。

    整型的取值范围和平台有关。
        32位     21亿左右
        64位     9E18
        Windows 平台下 PHP 7.0.0 以前，只支持 32 位，即使是在 64 位平台中。

    PHP_INT_SIZE    返回的值的单位是字节数
    PHP_INT_MAX
    PHP_INT_MIN     >= PHP 7.0.0

    警告
        PHP 7.0.0 以前，如果向八进制整数传递了一个非法数字（比如 8 或 9），则后面其余的数字会被忽略。
        PHP 7.0.0 以后，这么做会产生解析错误。
        （个人补充）不止八进制在这种情况下会产生解析错误，十六进制、二进制也会。

整型溢出
    如果 PHP 遇到了一个超出整型范围的数值，则会将它解释为浮点型。
    同样的，如果一个返回数值的操作的结果超出了整型范围，也会返回浮点型。

    PHP 中没有整除操作符。如果除法刚好是整除，返回值就是整数，否者的话返回值是浮点数。
    （来自用户的笔记）PHP 7.0.0 新增了 intdiv() 用于整除。

转换为整型
    显式转换
        (int) 或 (inteter)
        intval()
    隐式转换
        如果一个操作符、函数或者控制结构需要一个整型的参数，该值会自动转换。

    从布尔型
        true    1
        false   0
    从整型
        无变化
    从浮点型
        向 0 取整
        如果浮点数的值超出了整型的表示范围，则结果未定义，而且没有任何的警告或通知。
        从 PHP 7.0.0 开始，NaN 和无穷在转换为整型时总是转换为 0 。
        警告
            不要将未知的分数强制转换为整型，这样有时会导致不可预料的结果。
    从字符串
        见字符串类型的文档。
    从资源类型
        结果是 PHP 运行时为该资源分配的唯一的资源号。
    从 NULL
        转换为 0 。
    从其他类型
        转换行为未定义；不要依赖任何可见的行为，因为它可能会毫无征兆的改变。
        （个人补充）部分现有行为如下：
            从数组
                空数组转换为 0 ，非空数组转换为 1 。
            从对象
                会产生一个 E_NOTICE 级别的错误并且被转换为 1 。
            从 callable
                会产生一个 E_NOTICE 级别的错误并且被转换为 1 。

