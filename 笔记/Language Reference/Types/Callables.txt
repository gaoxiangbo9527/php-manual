从 PHP 5.4 开始可以使用 callable 类型提示来表示 callbacks 。过去本文档使用 callback 来达到相同的目的。
一些函数比如 call_user_func() 或 usort() 接受用户定义的回调函数作为一个参数。回调函数不仅可以是简单函数，还可以是对象的方法，乃至静态的类
方法。

传递
    一个 PHP 函数是使用其函数名对应的字符串传递的。
    任何内置函数或自定义函数都能被使用，除了语言结构，例如：array()、echo、empty() eval()、exit()、isset()、list()、print 或 unset() 。

    一个已实例化的对象的某个方法是以数组传递的，数组中下标 0 包含该对象，下标 1 包含方法名。
    允许在同一个类里访问其 protected 和 private 方法。

    静态的类方法也是以数组传递的，不过不用实例化该类的对象就可以传递，只是下标 0 中包含是类名而不是对象，下标 1 仍包含的是方法名。
    从 PHP 5.2.3 起，也能这样传递：'ClassName::methodName' 。

    来自示例：从 PHP 5.3 起，可以调用相对的静态方法名，比如 call_user_func(array('B', 'parent::who')); 。
    来自示例，从 PHP 5.3 起，实现了 __invoke() 的对象也可以被用作 callable 。

    除普通的用户定义的函数外，也可传递 匿名函数 给回调参数。

注意
    使用诸如 call_user_func() 和 call_user_func_array() 的函数注册的回调不会被调用，如果在前面的回调中有未捕获的异常的话。
