操作符的优先级指定了它将两个表达式绑定在一起的紧密程度。例如，在表达式 1 + 5 * 3 中，答案是 16 而不是 18，因为乘法操作符（*）拥有比加法
操作符（+）更高的优先级。如果必要的话，圆括号可用于强制优先级。例如： (1 + 5) * 3 求值为 18 。

当操作符拥有相同的优先级时，它们的结合性决定了操作符如何分组。例如“-”是左结合的，所以 1 - 2 - 3 将分组为 (1 - 2) - 3 且结果是 -4 。另
一方面，“=”是右结合的，因此 $a = $b = $c 被分组为 $a = ($b = $c) 。

相同优先级的无结合性操作符不能相邻的使用，例如，1 < 2 > 1 在 PHP 中是非法的。另一方面，表达式 1 <= 1 == 1 是合法的，因为 == 操作符的优
先级低于 <= 操作符。

使用圆括号，即使不是严格需要，可以通过使用显式的分组而不是依赖于隐式的操作符的优先级和结合性来提高代码的可读性。

下面的表格按照优先级的顺序列出了所有操作符，高优先级的操作符在顶部。同一行上的操作符拥有相同的优先级，在这种情况下，结合性决定如何分组。

操作符的优先级
    结合性      操作符                                                           额外的信息
    无结合性    clone new                                                       clone 和 new
    右结合性    **                                                              数学
    右结合性    ++ -- ~ (int) (float) (string) (array) (object) (bool) @        类型 和 递增/递减
    无结合性    instanceof                                                      类型
    右结合性    !                                                               逻辑
    左结合性    * / %                                                           数学
    左结合性    + - .                                                           数学 和 字符串
    左结合性    << >>                                                           位
    无结合性    < <= > >=                                                       比较
    无结合性    == != === !== <> <=>                                            比较
    左结合性    &                                                               位 和 引用
    左结合性    ^                                                               位
    左结合性    |                                                               位
    左结合性    &&                                                              逻辑
    左结合性    ||                                                              逻辑
    右结合性    ??                                                              空合并操作符
    左结合性    ? :                                                             三元操作符
    右结合性    = += -= *= **= /= .= %= &= |= ^= <<= >>=                        赋值
    右结合性    yield from                                                      yield from
    右结合性    yield                                                           yield
    左结合性    and                                                             逻辑
    左结合性    xor                                                             逻辑
    左结合性    or                                                              逻辑

操作符的优先级和结合性仅决定了表达式如何分组，它们没有指定求值的顺序。PHP（在一般情况下）没有指定表达式的求值顺序，也没有指定应该避免使用假
定的特定求值顺序的代码，因为行为可能在不同版本的PHP之间发生变化，或者取决于周围的代码。

注意：尽管 = 的优先级比大多数其他操作符都低，但 PHP 仍然允许类似以下的表达式：if (!$a = foo()) ，在这种情况下，foo() 的返回值被放入
$a 中。
