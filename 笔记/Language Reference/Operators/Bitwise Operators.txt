位操作符允许在一个整数内计算和操作特定的位。

位操作符
    示例         名称               结果
    $a & $b	    位与	               设置在 $a 和 $b 中设置的位。
    $a | $b	    位或（包含或）	   设置在 $a 或 $b 中设置的位。
    $a ^ $b	    位异或（排除或）      设置在 $a 或 $b 中设置但没有都设置的位。
    ~ $a	    位反	               设置在 $a 中没有设置的位。
    $a << $b	位左移	           将 $a 的位向左移动 $b 步。（每一步意味着“乘以2”）
    $a >> $b	位右移	           将 $a 的位向右移动 $b 步。（每一步意味着“除以2”）

在 PHP 中位移是算术。移出两端的位会被丢弃。向左移是 0 移进右侧而且符号位移出左侧，意味着操作数的符号不会被保留。向右移是复制符号位而且移进
左侧，意味着操作数的符号位会被保留。

使用圆括号去确保所需的优先级。例如，$a & $b == true，会先计算相等性，然后按位与；而 ($a & $b) == true 会先按位计算，然后再计算相等性。

如果 &， | 和 ^ 的两个操作数都是字符串，那么将对组成字符串的字符的 ASCII 值执行操作，结果将是一个字符串。所有其他情况下，两个操作数都会被
转换成整型并且结果也是一个整型。

如果 ~ 操作符的操作数是字符串，那么将对组成字符串的字符的 ASCII 值执行操作，结果将是一个字符串，否则，操作数和结果将被视为整数。

<< 和 >> 操作符的操作数和结果都被视为整数。

警告：在 PHP 7.0 之前，通过大于或等于系统长整型宽度的值或通过负数位移整数，会导致未定义的行为。换句话说，如果你使用的是 PHP 5.x ，在 32
位系统上移位不要超过 31 位，在 64 位系统上移位不要超过 63 位。使用 gmp 扩展中的函数对 PHP_INT_MAX 以外的数字进行按位操作。

参见 pack()、unpack()、gmp_and()、gmp_or()、gmp_xor()、gmp_testbit()、gmp_clrbit() 。
