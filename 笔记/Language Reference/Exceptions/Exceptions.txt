PHP 有一套类似其他编程语言的异常模型。在 PHP 中可以抛出一个异常并且捕获它。
代码可以被包围在一个 try 块中，以方便捕获潜在的异常。每一个 try 必须至少有一个相应的 catch 块或 finally 块。

抛出的对象必须是 Exception 类的实例或 Exception 的子类的实例。试图抛出一个不是这样的对象将导致一个 PHP 致命错误。
（个人补充，这只针对于异常来说是这样，如果是针对 PHP 7 来说已经不再是这样了）

catch
    可以应用多个 catch 块去捕获不同类型的异常。
    正常执行（当 try 块中没有抛出异常时）将在按顺序定义的最后一个 catch 块之后继续执行。
    可以在 catch 块中抛出(或重新抛出)异常。

    当抛出异常时，抛出异常的语句后面的代码将不会执行，PHP 将尝试找到第一个匹配的 catch 块。
    如果没有捕获到某个异常，PHP 将发出一个致命错误，并带有一条 “Uncaught exception…” 字样的消息，除非使用 set_exception_handler() 定义了
    一个处理程序。

    从 PHP 7.1 开始，可以使用管道字符（|）在一个 catch 块中指定多个异常，当你要以相同的方式处理来自不同类层次结构的不同异常时，这非常有用。

finally
    自 PHP 5.5 开始，还可以在 catch 块之后指定 finally 块或者使用 finally 块替换 catch 块。
    finally 块中的代码总是在 try 和 catch 块之后（不论它们中是否抛出一个异常）、正常执行恢复之前执行。

注意
    内部 PHP 函数主要使用错误报告，只有现代的面向对象的扩展使用异常。但是，错误可以通过 ErrorException 简单地转换为异常。

    标准 PHP 库(SPL)提供了大量的内置异常。
