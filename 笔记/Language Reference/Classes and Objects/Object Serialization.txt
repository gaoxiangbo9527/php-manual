序列化对象 - 在会话中存放对象
    serialize() 会返回一个包含了 PHP 可以存储的任何值的字节流形式的字符串。unserialize() 可以使用这个字符串去重建原始的变量值。
    使用序列化去保存一个对象会保存一个对象中的所有变量，对象中的方法不会被保存，只会保存类的名字。

    为了能够 unserialize() 一个对象，这个对象所属的类需要是已经定义的。
        include
        spl_autoload_register()

    如果一个应用使用了会话并且使用 session_register() 注册了一些对象，那么这些对象在每一个 PHP 页面结束时都会被自动的序列化，并且在后续的
    每一个页面中都会自动的反序列化；这意味着一旦这些对象成为了会话的一部分，那么它们就会出现在应用程序的每一个页面中。然而
    session_register() 在 PHP 5.4.0 中被移除了。

    如果一个应用程序会序列化对象用于之后的使用，则强烈建议在整个应用程序中包含这个对象所属的类的定义；如果不这么做，可能就会导致被反序列化的
    对象没有对应的类定义，此时反序列化后的对象会被赋予 __PHP_Incomplete_Class 类，这个类没有任何方法，所以反序列化后得到的对象也就没什么
    用处。

    除了以上建议，还可以在对象上使用 __sleep() 和 __wakeup() 方法对序列化/反序列化事件挂载钩子。
    使用 __sleep() 也能够让你仅序列化一部分对象的属性。

用户贡献的笔记
    对象的所有静态成员（静态属性和静态方法）都不会被序列化。
