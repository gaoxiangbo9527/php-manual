从 PHP 5.4.0 起，PHP 实现了一种代码复用的方法，称为 特性。

特性是 PHP 这种单继承语言中代码复用的一种机制。
特性通过允许开发人员在位于不同类层次结构中的若干独立的类中自由的复用方法集，从而减少单继承的一些限制。
特性和类组合的语义是以一种降低复杂性的方式定义的，并避免了与 多重继承 和 Mixins 相关的典型问题。

特性类似于类，但只打算以细粒度和一致的方式对功能进行分组。
单独实例化一个特性是不可能的。
它是对传统继承的补充，支持行为的水平组合；也就是说，可以应用类成员却不需要继承。

优先顺序
    当前类的方法会覆盖特性的方法，特性的方法会覆盖基类的方法。

多个特性
    通过在 use 语句中列出多个特性，并用逗号分隔，可以将多个特性插入到类中。

解决冲突
    如果两个特性都插入了一个相同名称的方法，如果这个冲突没有显式的被解决掉，那么就会产生一个致命错误。

    要解决在同一个类中使用的特性之间的命名冲突，需要使用 insteadof 操作符精确地选择其中一个冲突的方法。
    由于 insteadof 只允许排除方法，所以可以使用 as 操作符给被排除的方法 添加别名。
    注意，as 操作符并不会重命名方法，也不影响任何其他方法。

修改方法的可见性
    使用as语法，还可以调整e目标类中方法的可见性。

由特性组成特性
    正如类可以使用特性一样，其他的特性也可以使用特性。
    通过在一个特征定义中使用一个或多个特征，该特性可以部分或全部由那些其他特征中定义的成员组成。

抽象特性成员
    特性支持使用抽象方法，以便将需求强加给目标类。

    警示：具体类通过定义具有相同名称的具体方法来满足这一要求；它的签名可能有所不同。
    （个人猜测）应该和抽象方法采用的规则一致

静态特性成员
    特性可以定义静态属性和静态方法。

属性
    特性中也可以定义属性。
    如果一个特性中定义了一个属性，那么使用该特性的类就不能定义同名的属性，除非属性是兼容的（相同的可见性和初始值），否则就会发生一个致命错误。
    在 PHP 7.0.0 之前，在类中定义与特性名称相同的属性，即使相兼容（具有相同的可见性和初始值），也将抛出一个 E_STRICT 。
