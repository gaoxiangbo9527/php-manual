语言选项
    语言和杂项配置选项
        名称	                            默认值	    可修改范围	        变更日志
        short_open_tag	                "1"	        PHP_INI_PERDIR
        asp_tags	                    "0"	        PHP_INI_PERDIR      在 PHP 7.0.0 中被移除了。
        precision	                    "14"	    PHP_INI_ALL
        zend.assertions	                "1"	        PHP_INI_ALL 带限制   从 PHP 7.0.0 开始可用。

    short_open_tag  boolean
        告诉 PHP 是否应该允许简短形式（<? ?>）的 PHP 开始标签。如果你想结合使用 PHP 和 XML ，你可以禁用此选项从而使用嵌入的 <?xml ?> 。
        否则的话，你需要使用 PHP 去输出它，例如 <?php echo '<?xml version="1.0"?>'; ?> 。此外，如果禁用，则你必须使用长形式的 PHP
        开放标签（<?php ? >）。

        注意：
            在 PHP 5.4.0 以前，这个指令也会影响简写形式的 <?= ，它相当于 <? echo 。使用这种快捷方式需要开启 short_open_tag 。从 PHP
            5.4.0 开始，<?= 总是可用的。
    asp_tags    boolean
        除了通常的 <?php ?> 标签外，启用类 ASP 的 标签。这包括打印变量值的简写形式 <%= $value %> 。更多信息，请查看
        Escaping from HTML 。

        asp_tags 的变更日志
            版本	    描述
            7.0.0   从 PHP 中移除。
    precision   integer
        浮点数中会显示的有效数字的数目。-1 表示将使用一种改进的四舍五入算法。
    zend.assertions	    integer
        当设置为1时，断言代码会被生成和执行（开发模式）；当设置为 0 时，断言代码会生成但会被跳过（不执行）；当设置为 -1 时，断言代码不会被
        生成，使得断言 0 成本（生产模式）。
        注意
            如果在生产模式中启动一个过程，那么在运行时期间不能改变 zend.assertions ，因为断言代码并没有生成。
            如果在开发模式中启动一个过程，那么在运行时期间不能将 zend.assertions 设置为 -1 （但应该可以被设置为 0 ）。
数据处理
    数据处理配置选项
        名称                             默认值       可修改范围           变更日志
        variables_order	                "EGPCS"	    PHP_INI_PERDIR	    在 PHP <= 5.0.5 中是 PHP_INI_ALL
        request_order	                ""	        PHP_INI_PERDIR	    从 PHP 5.3.0 开始可用
        register_argc_argv	            "1"	        PHP_INI_PERDIR
        register_long_arrays	        "1"	        PHP_INI_PERDIR	    在 PHP 5.3.0 中被废弃。在 PHP 5.4.0 中被移除。
        post_max_size	                "8M"	    PHP_INI_PERDIR
        auto_prepend_file               NULL        PHP_INI_PERDIR
        auto_append_file	            NULL	    PHP_INI_PERDIR
        always_populate_raw_post_data	"0"	        PHP_INI_PERDIR	    在 PHP 7.0.0 中被移除了。

    variables_order string
        设置 EGPCS （Environment，Get，Post，Cookie 和 Server） 变量的解析顺序。
        个人补充：个人理解由于 $_SESSION 是 PHP 内部的变量，不像上面的这几种变量是从 PHP 外来的，所以也就不在该指令的配置范围之内。
        例如：如果 variables_order 设置为 "SP"，则 PHP 会创建超全局变量 $_SERVER 和 $_POST，却不会创建 $_ENV，$_GET 和 $_COOKIE。
        设置为 "" 则表示不会设置任何超全局变量。

        警告
            在 CGI 和 FastCGI SAPI 中时，$_SERVER 中也会填充进来自环境的值，所以不论 E 位于该指令的何处 S 总是相当于 ES 。
        注意
            该指令也会影响 $_REQUEST 变量的内容和顺序。
    request_order   string
        该指令描述了 PHP 会按何种顺序把 GET，POST 和 COOKIE 变量注册进 $_REQUEST 数组中。注册是从左向右进行的，后出现的值会覆盖先出现的值。
        如果没有设置该指令，则会使用 variables_order 去计算 $_REQUEST 的内容。
        注意由于安全性原因，默认的 php.ini 文件中不会包含 "C" 从而去包含 cookie 。
    register_argc_argv  boolean
        告知 PHP 是否声明 argc 和 argv 变量（它们将包含 GET 信息）。另请参阅 命令行。
        (个人补充，这里说的不是很准确，具体看 $argc 和 $argv 中的个人总结)
    register_long_arrays    boolean
        告知 PHP 是否去注册已经被废弃的长 $HTTP_*_VARS 类型的预定义变量。当启用时（默认），类似 $HTTP_GET_VARS 这种长的、预定义的 PHP
        变量将会被定义。如果你不会使用它们，推荐关闭它们，出于性能原因。相应的，应使用超全局数组，比如 $_GET 。这个指令是在 PHP 5.0.0 中
        变成可用的。

        警告
            从 PHP 5.3.0 开始这个特性已经被废弃并且从 PHP 5.4.0 开始被移除。
    post_max_size   integer
        设置 post 数据允许的最大大小。
        这个设置也会影响文件上传，想要上传大文件，则它的值必须大于 upload_max_filesize 的值。
        通常来说，memory_limit 的值应当大于 post_max_size 的值。
        如果使用整数值，则该值的单位为字节。也可以使用简写表示法。
        如果 post 数据的大小超过了 post_max_size ，则全局变量 $_POST 和 $_FILES 都会是空的。
        注意：
            PHP 允许字节值的快捷方式，包括 K 、M 和 G 。如果你使用了它们当中的任何一个，PHP 会自动的进行转换。
            注意不要超过 32 位有符号整数的限制（如果你使用的是 32 位的版本），因为这么做会导致你的脚本失败。
        post_max_size 的更新日志
            5.3.4           当 Content-Type 是 application/x-www-form-urlencoded 或者 PHP 没有注册的值，post_max_size = 0 不会
                            禁用该限制。
            5.3.2 , 5.2.12  通过将 post_max_size 设置为 0 ，即可不限制 post 的大小。
    auto_prepend_file   string
        指定会自动的在主文件之前被解析的文件的文件名。
        该文件会像使用 require 调用了该文件那样被包含（进主文件），并且会使用 include_path 。
        特殊的值 none 会禁用自动前置。
    auto_append_file    string
        指定会自动的在主文件之后被解析的文件的文件名。
        该文件会像使用 require 调用了该文件那样被包含（进主文件），并且会使用 include_path 。
        特殊的值 none 会禁用自动后置。
        注意：如果脚本被 exit() 终止，自动后置将不会发生。
    always_populate_raw_post_dat    mixed
        警告：这个特性在 PHP 5.6.0 中被废弃了并且从 PHP 7.0.0 开始被移除了。

        如果设置为 TRUE，则 PHP 总是会填充 $HTTP_RAW_POST_DATA，其中包含了原生的 POST 数据。
        否则（个人补充：这里可能表示设置为 FALSE 时），只有当无法识别 MIME 的类型时才会填充该变量。
        将 always_populate_raw_post_data 设置为 -1 将在 PHP 未来的版本中实现的新的行为，即不会定义 $HTTP_RAW_POST_DATA 。
        不论如何设置，$HTTP_RAW_POST_DATA 在 enctype="multipart/form-data" 时不可用。

        访问原生 POST 数据的推荐方式是 php://input，并且 $HTTP_RAW_POST_DATA 从 PHP 5.6.0 开始被废弃了。

路径和目录
    路径和目录的配置选项
        名称                     默认值                       可修改范围            变更日志
        include_path            ".;/path/to/php/pear"       PHP_INI_ALL
        extension_dir	        "/path/to/php"	            PHP_INI_SYSTEM
    下面是配置指令们的一份简要描述。
    include_path        string
        指定了一个目录列表，require、include 以及 fopen()、file()、readfile() 和 file_get_contents() 函数会在其中查找文件。
        它的格式和系统的环境变量 PATH 的格式很像：在 Unix 系统中是一份冒号分隔的目录列表，而在 Windows 系统中则使用分号分隔。

        在查找要包含的文件时，PHP 认为该包含路径中的每一条记录都是独立的。它会先检查第一个路径，如果在其中没有找到目标文件的话，就会检查下一个路径，
        直到要么找到了要被包含的文件，要么就返回一个警告或者错误。你可以在运行时使用 set_include_path() 去修改或者设置包含路径。

        在包含路径中使用一个 . 就可以允许相对包含，因为它表示当前目录。然而显式的使用 include './file' 比让 PHP 为每一次包含都检查一遍当前目录
        是更加有效率的。

        注意：在 .ini 文件中也可以访问 ENV 变量，因此可能通过使用 ${LOGIN} 和 ${USER} 去引用主目录。
        环境变量在服务器 API 之间可能会有所不同，因为这些环境（服务器 API）可能是不同的。
    extension_dir       string
        PHP 应该在哪个目录中寻找可动态加载的扩展。另请参阅：enable_dl 和 dl() 。

文件上传
    file_uploads            boolean
        是否允许 HTTP 文件上传。
    upload_tmp_dir          string
        当进行文件上传时，用于存放文件的临时目录。
        如果没有指定，则使用系统默认的目录。
        该目录对于运行 PHP 的用户必须可写才行。如果指定的目录是不可写的，PHP 会回退到系统默认的目录。
        如果开启了 open_basedir ，那么系统默认的目录必须允许上传成功。
    upload_max_filesize     integer
        （一个）被上传的文件的最大尺寸。
        如果使用整数值，则该值的单位为字节。也可以使用简写表示法。
    max_file_uploads        integer
        允许同时进行上传的文件的最大数量。
        从 PHP 5.3.4 开始，在提交时留空的上传字段不会计入该限制中。
