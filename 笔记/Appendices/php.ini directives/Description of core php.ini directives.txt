数据处理
    variables_order string
        设置 EGPCS （Environment，Get，Post，Cookie 和 Server） 变量的解析顺序。
        个人补充：个人理解由于 $_SESSION 是 PHP 内部的变量，不像上面的这几种变量是从 PHP 外来的，所以也就不在该指令的配置范围之内。
        例如：如果 variables_order 设置为 "SP"，则 PHP 会创建超全局变量 $_SERVER 和 $_POST，却不会创建 $_ENV，$_GET 和 $_COOKIE。
        设置为 "" 则表示不会设置任何超全局变量。

        警告
            在 CGI 和 FastCGI SAPI 中时，$_SERVER 中也会填充进来自环境的值，所以不论 E 位于该指令的何处 S 总是相当于 ES 。
        注意
            该指令也会影响 $_REQUEST 变量的内容和顺序。
    request_order   string
        该指令描述了 PHP 会按何种顺序把 GET，POST 和 COOKIE 变量注册进 $_REQUEST 数组中。注册是从左向右进行的，后出现的值会覆盖先出现的值。
        如果没有设置该指令，则会使用 variables_order 去计算 $_REQUEST 的内容。
        注意由于安全性原因，默认的 php.ini 文件中不会包含 "C" 从而去包含 cookie 。
    post_max_size   integer
        设置 post 数据允许的最大大小。
        这个设置也会影响文件上传，想要上传大文件，则它的值必须大于 upload_max_filesize 的值。
        通常来说，memory_limit 的值应当大于 post_max_size 的值。
        如果使用整数值，则该值的单位为字节。也可以使用简写表示法。
        如果 post 数据的大小超过了 post_max_size ，则全局变量 $_POST 和 $_FILES 都会是空的。
        注意：
            PHP 允许字节值的快捷方式，包括 K 、M 和 G 。如果你使用了它们当中的任何一个，PHP 会自动的进行转换。
            注意不要超过 32 位有符号整数的限制（如果你使用的是 32 位的版本），因为这么做会导致你的脚本失败。
        post_max_size 的更新日志
            5.3.4           当 Content-Type 是 application/x-www-form-urlencoded 或者 PHP 没有注册的值，post_max_size = 0 不会
                            禁用该限制。
            5.3.2 , 5.2.12  通过将 post_max_size 设置为 0 ，即可不限制 post 的大小。
    always_populate_raw_post_dat    mixed
        警告：这个特性在 PHP 5.6.0 中被废弃了并且从 PHP 7.0.0 开始被移除了。

        如果设置为 TRUE，则 PHP 总是会填充 $HTTP_RAW_POST_DATA，其中包含了原生的 POST 数据。
        否则（个人补充：这里可能表示设置为 FALSE 时），只有当无法识别 MIME 的类型时才会填充该变量。
        将 always_populate_raw_post_data 设置为 -1 将在 PHP 未来的版本中实现的新的行为，即不会定义 $HTTP_RAW_POST_DATA 。
        不论如何设置，$HTTP_RAW_POST_DATA 在 enctype="multipart/form-data" 时不可用。

        访问原生 POST 数据的推荐方式是 php://input，并且 $HTTP_RAW_POST_DATA 从 PHP 5.6.0 开始被废弃了。

文件上传
    file_uploads            boolean
        是否允许 HTTP 文件上传。
    upload_tmp_dir          string
        当进行文件上传时，用于存放文件的临时目录。
        如果没有指定，则使用系统默认的目录。
        该目录对于运行 PHP 的用户必须可写才行。如果指定的目录是不可写的，PHP 会回退到系统默认的目录。
        如果开启了 open_basedir ，那么系统默认的目录必须允许上传成功。
    upload_max_filesize     integer
        （一个）被上传的文件的最大尺寸。
        如果使用整数值，则该值的单位为字节。也可以使用简写表示法。
    max_file_uploads        integer
        允许同时进行上传的文件的最大数量。
        从 PHP 5.3.4 开始，在提交时留空的上传字段不会计入该限制中。
