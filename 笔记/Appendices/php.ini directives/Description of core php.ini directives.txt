语言选项
    语言和杂项配置选项
        名称	                            默认值	    可修改范围	        变更日志
        short_open_tag	                "1"	        PHP_INI_PERDIR
        asp_tags	                    "0"	        PHP_INI_PERDIR      在 PHP 7.0.0 中被移除了。
        precision	                    "14"	    PHP_INI_ALL
        serialize_precision	            "-1"	    PHP_INI_ALL	        在 PHP 5.3.6 之前，默认值是 100。
                                                                        在 PHP 7.1.0 之前，默认值是 17 。
        disable_functions	            ""	        仅 php.ini（手册中这里好像出错了，我自己修改过来了）
        disable_classes	                ""	        仅 php.ini
        expose_php                      "1"         仅 php.ini
        zend.assertions	                "1"	        PHP_INI_ALL 带限制   从 PHP 7.0.0 开始可用。

    short_open_tag  boolean
        告诉 PHP 是否应该允许简短形式（<? ?>）的 PHP 开始标签。如果你想结合使用 PHP 和 XML ，你可以禁用此选项从而使用嵌入的 <?xml ?> 。
        否则的话，你需要使用 PHP 去输出它，例如 <?php echo '<?xml version="1.0"?>'; ?> 。此外，如果禁用，则你必须使用长形式的 PHP
        开放标签（<?php ? >）。

        注意：
            在 PHP 5.4.0 以前，这个指令也会影响简写形式的 <?= ，它相当于 <? echo 。使用这种快捷方式需要开启 short_open_tag 。从 PHP
            5.4.0 开始，<?= 总是可用的。
    asp_tags    boolean
        除了通常的 <?php ?> 标签外，启用类 ASP 的 标签。这包括打印变量值的简写形式 <%= $value %> 。更多信息，请查看
        Escaping from HTML 。

        asp_tags 的变更日志
            版本	    描述
            7.0.0   从 PHP 中移除。
    precision   integer
        浮点数中会显示的有效数字的数目。-1 表示将使用一种增强的四舍五入算法。
    serialize_precision     integer
        序列化浮点数时存储的有效位数。-1 表示将使用一种增强的四舍五入算法。
    disable_functions   string
        这个指令允许你去禁用特定的函数。它接受一个逗号分隔的函数名称列表。

        使用这个指令只能禁用内置函数。不会影响用户定义的函数。

        这个指令必须在 php.ini 中设置。例如，你不能在 httpd.conf 中设置它。
    disable_classes     string
        这个指令允许你去禁用特定的类。它接受一个逗号分隔的类名称列表。这个指令必须在 php.ini 中设置。例如，你不能在 httpd.conf 中设置它。
    expose_php  boolean
        向外界公开 PHP 安装在服务器上，服务器会在 HTTP 头文中包含 PHP 的版本（例如，X-Powered-By: PHP/5.3.7）。在 PHP 5.5.0 之前也
        会公开 PHP logo guids，因此把它们追加到你 PHP 脚本的 URL 上将会显示适当的 logo（例如，
        https://www.php.net/?=PHPE9568F34-D428-11d2-A769-00AA001ACF42）。该选项也会影响 phpinfo() 的输出，因为禁用时，PHP logo
        和工作人员信息将不会被显示。个人补充：个人测试，该选项不会影响工作人员信息的显示。

        注意：从 PHP 5.5.0 开始，这些 guids 和 php_logo_guid() 函数已经被从 PHP 中移除了，并且 guids 已经被 data URIs 替换了。因此
        通过把 guid 追加到 URL 中来访问 PHP logo 的方式不会再工作了。同样，关闭 expose_php 也不会影响在 phpinfo() 中看到 PHP logo。

        另请参阅 php_logo_guid() 和 phpcredits() 。
    zend.assertions	    integer
        当设置为1时，断言代码会被生成和执行（开发模式）；当设置为 0 时，断言代码会生成但会被跳过（不执行）；当设置为 -1 时，断言代码不会被
        生成，使得断言 0 成本（生产模式）。
        注意
            如果在生产模式中启动一个过程，那么在运行时期间不能改变 zend.assertions ，因为断言代码并没有生成。
            如果在开发模式中启动一个过程，那么在运行时期间不能将 zend.assertions 设置为 -1 （但应该可以被设置为 0 ）。

资源限制
    资源限制
        名称	                    默认值       可修改范围           变更日志
        memory_limit            "128M"	    PHP_INI_ALL	        PHP 5.2.0 以前是 "8M"，PHP 5.2.0 是 "16M"

    memory_limit    integer
        这个指令设置了一个脚本允许被分配的最大内存数量，单位为字节。这有助于防止编写拙劣的脚本去吃光一台服务器上所有可用的内存。注意，想要没
        有内存限制，可以把这个指令设置为 -1 。

        在 PHP 5.2.1 前，为了使用这个指令，就必须在编译时通过在配置行中使用 --enable-memory-limit 来启用它。在 5.2.1 前，这个编译时标
        志对于定义函数 memory_get_usage() 和 memory_get_peak_usage() 来说也是必需的。

        当使用一个整数时，值是以字节为单位度量的。你也可以如 这篇 FAQ 中所描述的去使用简写记法。

    另请参阅：max_execution_time 。

性能调节
    性能调节
        名称                     默认值       可修改范围           变更日志
        realpath_cache_size	    "4M"        PHP_INI_SYSTEM      从 PHP 5.1.0 开始可用。在 PHP 7.0.16 和 7.1.2 之前，默认是
                                                                "16K"
        realpath_cache_ttl	    "120"	    PHP_INI_SYSTEM      从 PHP 5.1.0 开始可用。

    注意：使用 open_basedir 将会禁用 realpath 缓存。

    realpath_cache_size     integer
        确定被 PHP 使用的 realpath 缓存的大小。在那些 PHP 会打开许多文件的系统上，应该增加这个值，去反映被执行的文件操作的数量。

        大小表示被存储的路径字符串中的总字节数，以及与缓存记录相关的数据的大小。这意味着为了在缓存中存储更长的路径，缓存的大小必须更大。
        此值不直接控制可缓存的不同路径的数量。

        缓存记录数据所需的大小取决于系统。
    realpath_cache_ttl integer
        缓存给定文件或目录的 realpath 信息的持续时间（以秒计）。对于文件很少更改的系统，可以考虑增加这个值。

数据处理
    数据处理配置选项
        名称                             默认值       可修改范围           变更日志
        variables_order	                "EGPCS"	    PHP_INI_PERDIR	    在 PHP <= 5.0.5 中是 PHP_INI_ALL
        request_order	                ""	        PHP_INI_PERDIR	    从 PHP 5.3.0 开始可用
        register_argc_argv	            "1"	        PHP_INI_PERDIR
        register_long_arrays	        "1"	        PHP_INI_PERDIR	    在 PHP 5.3.0 中被废弃。在 PHP 5.4.0 中被移除。
        post_max_size	                "8M"	    PHP_INI_PERDIR
        auto_prepend_file               NULL        PHP_INI_PERDIR
        auto_append_file	            NULL	    PHP_INI_PERDIR
        default_charset	                "UTF-8"	    PHP_INI_ALL	        从 PHP >= 5.6.0 起默认为 "UTF-8"；对于 PHP < 5.6.0
                                                                        默认为空。
        always_populate_raw_post_data	"0"	        PHP_INI_PERDIR	    在 PHP 7.0.0 中被移除了。

    variables_order string
        设置 EGPCS （Environment，Get，Post，Cookie 和 Server） 变量的解析顺序。
        个人补充：个人理解由于 $_SESSION 是 PHP 内部的变量，不像上面的这几种变量是从 PHP 外来的，所以也就不在该指令的配置范围之内。
        例如：如果 variables_order 设置为 "SP"，则 PHP 会创建超全局变量 $_SERVER 和 $_POST，却不会创建 $_ENV，$_GET 和 $_COOKIE。
        设置为 "" 则表示不会设置任何超全局变量。

        警告
            在 CGI 和 FastCGI SAPI 中时，$_SERVER 中也会填充进来自环境的值，所以不论 E 位于该指令的何处 S 总是相当于 ES 。
        注意
            该指令也会影响 $_REQUEST 变量的内容和顺序。
    request_order   string
        该指令描述了 PHP 会按何种顺序把 GET，POST 和 COOKIE 变量注册进 $_REQUEST 数组中。注册是从左向右进行的，后出现的值会覆盖先出现的值。
        如果没有设置该指令，则会使用 variables_order 去计算 $_REQUEST 的内容。
        注意由于安全性原因，默认的 php.ini 文件中不会包含 "C" 从而去包含 cookie 。
    register_argc_argv  boolean
        告知 PHP 是否声明 argc 和 argv 变量（它们将包含 GET 信息）。另请参阅 命令行。
        (个人补充，这里说的不是很准确，具体看 $argc 和 $argv 中的个人总结)
    register_long_arrays    boolean
        告知 PHP 是否去注册已经被废弃的长 $HTTP_*_VARS 类型的预定义变量。当启用时（默认），类似 $HTTP_GET_VARS 这种长的、预定义的 PHP
        变量将会被定义。如果你不会使用它们，推荐关闭它们，出于性能原因。相应的，应使用超全局数组，比如 $_GET 。这个指令是在 PHP 5.0.0 中
        变成可用的。

        警告
            从 PHP 5.3.0 开始这个特性已经被废弃并且从 PHP 5.4.0 开始被移除。
    post_max_size integer
        设置允许的 post 数据的最大大小。这个设置也会影响文件上传。要想上传大文件，这个值必须大于 upload_max_filesize 的值。通常来说，
        memory_limit 的值应当大于 post_max_size 的值。当使用一个整数值时，值是以字节度量的。也可以使用简写符号，如这个 FAQ 中所述。如果
        post 数据的大小超过了 post_max_size ，则超全局变量 $_POST 和 $_FILES 都会是空的。这可以通过各种方式进行跟踪，例如，通过将
        $_GET 变量传递给处理数据的脚本，即 <form action="edit.php?processed=1">，然后检查 $_GET['processed'] 是否设置。

        注意：PHP 允许字节值的快捷方式，包括 K 、M 和 G 。如果你使用了它们当中的任何一个，PHP 会自动的进行转换。注意不要超过 32 位有符号
        整数的限制（如果你使用的是 32 位的版本），因为这么做会导致你的脚本失败。

        post_max_size 的更新日志
        版本             描述
        5.3.4           当 Content-Type 是 application/x-www-form-urlencoded 或者 PHP 没有注册的值，post_max_size = 0 不会
                        禁用该限制。
        5.3.2 , 5.2.12  通过将 post_max_size 设置为 0 ，即可不限制 post 的大小。
    auto_prepend_file   string
        指定会自动的在主文件之前被解析的文件的文件名。
        该文件会像使用 require 调用了该文件那样被包含（进主文件），并且会使用 include_path 。
        特殊的值 none 会禁用自动前置。
    auto_append_file    string
        指定会自动的在主文件之后被解析的文件的文件名。
        该文件会像使用 require 调用了该文件那样被包含（进主文件），并且会使用 include_path 。
        特殊的值 none 会禁用自动后置。
        注意：如果脚本被 exit() 终止，自动后置将不会发生。
    default_charset string
        从 PHP 5.6 开始，"UTF-8" 是默认值并且它的值将用作 htmlentities()，html_entity_decode() 和 htmlspecialchars() 的默认字符
        编码，如果省略了 encoding 参数的话。default_charset 的值还将用于为 iconv 函数设置默认字符集，如果没有设置配置选项
        iconv.input_encoding，iconv.output_encoding 和 iconv.internal_encoding 的话，并且还将用于为 mbstring 函数设置默认字符集
        ，如果没有设置配置选项 mbstring.http_input，mbstring.http_output 和 mbstring.internal_encoding 的话。

        所有版本的 PHP 都将在 PHP 发送的 Content-Type 头中默认使用此值作为字符集，如果该头没有被一个 header() 调用覆盖的话。

        把 default_charset 设置为一个空值是不推荐的。
    always_populate_raw_post_dat    mixed
        警告：这个特性在 PHP 5.6.0 中被废弃了并且从 PHP 7.0.0 开始被移除了。

        如果设置为 TRUE，则 PHP 总是会填充 $HTTP_RAW_POST_DATA，其中包含了原生的 POST 数据。
        否则（个人补充：这里可能表示设置为 FALSE 时），只有当无法识别 MIME 的类型时才会填充该变量。
        将 always_populate_raw_post_data 设置为 -1 将在 PHP 未来的版本中实现的新的行为，即不会定义 $HTTP_RAW_POST_DATA 。
        不论如何设置，$HTTP_RAW_POST_DATA 在 enctype="multipart/form-data" 时不可用。

        访问原生 POST 数据的推荐方式是 php://input，并且 $HTTP_RAW_POST_DATA 从 PHP 5.6.0 开始被废弃了。

路径和目录
    路径和目录的配置选项
        名称                     默认值                       可修改范围           变更日志
        include_path            ".;/path/to/php/pear"       PHP_INI_ALL
        open_basedir	        NULL	                    PHP_INI_ALL	        在 PHP < 5.3.0 中，是 PHP_INI_SYSTEM 。
        user_ini.cache_ttl	    "300"	                    PHP_INI_SYSTEM	    从 PHP 5.3.0 开始可用。
        user_ini.filename	    ".user.ini"	                PHP_INI_SYSTEM	    从 PHP 5.3.0 开始可用。
        extension_dir	        "/path/to/php"	            PHP_INI_SYSTEM
        zend_extension	        NULL	                    仅 php.ini
    下面是配置指令们的一份简要描述。

    include_path        string
        指定了一个目录列表，require、include 以及 fopen()、file()、readfile() 和 file_get_contents() 函数会在其中查找文件。
        它的格式和系统的环境变量 PATH 的格式很像：在 Unix 系统中是一份冒号分隔的目录列表，而在 Windows 系统中则使用分号分隔。

        在查找要包含的文件时，PHP 认为该包含路径中的每一条记录都是独立的。它会先检查第一个路径，如果在其中没有找到目标文件的话，就会检查下一
        个路径，直到要么找到了要被包含的文件，要么就返回一个警告或者错误。你可以在运行时使用 set_include_path() 去修改或者设置包含路径。

        在包含路径中使用一个 . 就可以允许相对包含，因为它表示当前目录。然而显式的使用 include './file' 比让 PHP 为每一次包含都检查一遍当
        前目录是更加有效率的。

        注意：在 .ini 文件中也可以访问 ENV 变量，因此可能通过使用 ${LOGIN} 和 ${USER} 去引用主目录。
        环境变量在服务器 API 之间可能会有所不同，因为这些环境（服务器 API）可能是不同的。
    open_basedir string
        将 PHP 可以访问的文件限制在指定的目录树中，包括文件本身。这个指令不受安全模式是否开启或关闭的影响。

        当一个脚本尝试访问文件系统时，例如使用 include 或 fopen() ，会检查该文件的位置。当该文件位于指定的目录树外时，PHP 将拒绝访问它。
        所有的符号链接会被解析，所以使用符号链接不可能避免这一限制。如果该文件不存在，则无法解析该符号链接，并将该文件名与（已解析的）
        open_basedir 进行比较。

        open_basedir 可以影响的不仅仅是文件系统函数；例如，如果 MySQL 被配置为使用 mysqlnd 驱动程序，LOAD DATA INFILE 将受到
        open_basedir 的影响。PHP 的许多扩展功能都是这样使用 open_basedir 的。

        特殊值 . 指示将使用脚本的工作目录作为基础目录。然而，这有一点危险，因为用 chdir() 可以很容易地更改脚本的工作目录。

        在 httpd.conf 中，可以通过与任何其他配置指令一样的方式 "php_admin_value open_basedir none" 关闭 open_basedir （例如，为了
        一些虚拟主机）。

        在 Windows 下，目录使用一个分号分隔。在其它所有的平台上，目录使用一个冒号分隔。作为一个 Apache 模块，来自父目录的 open_basedir
        路径现在会自动的被继承。

        从 PHP 5.2.16 和 5.3.4 起，open_basedir 指定的限制是一个目录名。以前的版本使用它作为一个前缀。这意味着
        "open_basedir = /dir/incl" 也允许访问 "/dir/include" 和 "/dir/incls"，如果它们存在的话。当你希望将访问限制为只访问指定的目
        录时，以一个斜杠结束。例如 open_basedir = /dir/incl/ 。

        默认值是允许打开所有的文件。

        注意：从 PHP 5.3.0 开始，open_basedir 可以在运行时收紧。这意味着如果在 php.ini 中把 open_basedir 设置为 /www，则一个脚本可以
        在运行时通过 ini_set() 把该配置收紧为 /www/tmp/ 。当监听多个目录时，不管操作系统是什么，你可以使用 PATH_SEPARATOR 常量作为一个
        分隔符。

        注意：使用 open_basedir 会将 realpath_cache_size 设置为 0 并且因此会禁用 realpath 缓存。
    user_ini.cache_ttl  integer
        控制了用户 INI 文件被重新读取的频率。默认为 300 秒（5 分钟）。
    user_ini.filename   string
        设置了 PHP 会在每个目录中查找的文件的名称。如果设置一个空字符串，那么 PHP 根本不会进行扫描。默认为 .user.ini 。
    extension_dir       string
        PHP 应该在哪个目录中寻找可动态加载的扩展。另请参阅：enable_dl 和 dl() 。
    zend_extension      string
        在 PHP 启动时要加载的可动态加载的 Zend 扩展的名称（例如 APD）。

文件上传
    文件上传配置选项
        名称	                        默认值	可修改范围	        更新日志
        file_uploads	            "1"	    PHP_INI_SYSTEM
        upload_tmp_dir	            NULL	PHP_INI_SYSTEM
        upload_max_filesize	        "2M"	PHP_INI_PERDIR
        max_file_uploads	        20	    PHP_INI_SYSTEM	    从 PHP 5.2.12 开始可用。
    下面是配置指令们的一份简要描述。

    file_uploads boolean
        是否允许 HTTP 文件上传。另请参阅 upload_max_filesize，upload_tmp_dir 和 post_max_size  指令。
    upload_tmp_dir string
        当进行文件上传时，用于存放文件的临时目录。该目录必须对于 PHP 运行为的用户可写。如果没有指定，则使用系统默认的目录。

        如果指定的目录是不可写的，PHP 会回退到系统默认的目录。如果开启了 open_basedir ，那么系统默认的目录必须是被允许的，以成功的上传。
    upload_max_filesize integer
        一个被上传的文件的最大尺寸。

        当使用一个整数时，值是以字节为单位度量的。也可以使用简写符号，如这个 FAQ 中所述。
    max_file_uploads        integer
        允许同时进行上传的文件的最大数量。从 PHP 5.3.4 开始，在提交时留空的上传字段不会计入该限制中。
