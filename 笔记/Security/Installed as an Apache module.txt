当 PHP 被用作一个 Apache 模块时，它继承了 Apache 的用户权限（通常是那些“nobody”用户）。这对安全性和授权有几个影响。例如，如果你正在使用
PHP 去访问一个数据库，除非数据库拥有内置的访问控制，否则你必须让“nobody”用户可以访问数据库。这意味着即使没有用户名和密码，恶意脚本也可以访问
和修改数据库。一个 web 爬虫完全有可能偶然的访问到一个数据库管理员的 web 页面，并且删除所有的数据库。您可以使用 Apache 授权、或使用 LDAP、
.htaccess 文件等来设计自己的访问模型并包含这些代码作为 PHP 脚本的一部分来防止这种情况的发生。

通常，一旦建立了到 PHP 用户（在本例中，即 apache 的用户）的风险非常小这种程度的安全性，就会发现现在 PHP 被禁止向用户目录写入任何文件。或者，
PHP 可能被阻止去访问或更改数据库。它同样可以避免写好的和坏的文件，或者输入好的和坏的数据库事务。

此时，一个常见的安全性错误是给 apache 分配 root 权限，或者以其他方式提升 apache 的能力。

将 Apache 的用户权限提升到 root 是非常危险的，可能会危及整个系统，所以不是安全专家的人不应该考虑进行 sudo、chroot 或者其他以 root 运行的
操作。

有一些更简单的解决方案。通过使用 open_basedir，你可以控制和限制 PHP 可以使用哪些目录。你还可以设置 apache 专用的区域，以将所有基于 web 的
活动限制非用户或非系统的文件。
