目录
    空字节相关的问题

就文件和目录的权限而言，PHP 会受大多数服务器系统内建的安全性的影响。这允许你去控制文件系统中的哪些文件可以被读取。对于全世界可读的任何文件都
要小心，以确保所有访问该文件系统的用户都可以安全地读取它们。

因为 PHP 被设计为允许对文件系统进行用户级的访问，所以编写一个 PHP 脚本来读取诸如 /etc/passwd 的系统文件、修改以太网连接、发出大量的打印机
作业等是完全可能的。这有一些明显的暗示，你需要去确保你读取的文件和你写入的文件应该是恰当的文件。

考虑以下脚本，这里有一个用户表示希望去删除他们主目录中的一个文件。这里假设了一种情景，即有一个 PHP web 界面经常被用于管理文件，所以 Apache
的用户被允许去删除用户主目录中的文件。

Example #1 糟糕的变量检查会导致...
    <?php
    // remove a file from the user's home directory
    $username = $_POST['user_submitted_name'];
    $userfile = $_POST['user_submitted_filename'];
    $homedir  = "/home/$username";

    unlink("$homedir/$userfile");

    echo "The file has been deleted!";
    ?>

由于用户名和文件名可以提交自一个用户表单，他们就可以提交属于其他人的用户名和文件名，并删除它，即使他们不应该被允许这样做。在这种情况下，你可能
会想要使用其他形式的身份验证。想象一下如果提交的变量是"../etc/"和"passwd"时会发生什么。此时，代码实际上将会被读作：

Example #2 ... 一个文件系统攻击
    <?php
    // removes a file from anywhere on the hard drive that
    // the PHP user has access to. If PHP has root access:
    $username = $_POST['user_submitted_name']; // "../etc"
    $userfile = $_POST['user_submitted_filename']; // "passwd"
    $homedir  = "/home/$username"; // "/home/../etc"

    unlink("$homedir/$userfile"); // "/home/../etc/passwd"

    echo "The file has been deleted!";
    ?>

你应该采取两种重要的措施来防止这些问题。
    只对 PHP web 的用户二进制文件授予有限的权限。
    检查提交过来的所有变量。

这是一份改进后的脚本：

Example #3 更安全的文件名检查
    <?php
    // removes a file from the hard drive that
    // the PHP user has access to.
    $username = $_SERVER['REMOTE_USER']; // using an authentication mechanism
    $userfile = basename($_POST['user_submitted_filename']);
    $homedir  = "/home/$username";

    $filepath = "$homedir/$userfile";

    if (file_exists($filepath) && unlink($filepath)) {
        $logstring = "Deleted $filepath\n";
    } else {
        $logstring = "Failed to delete $filepath\n";
    }
    $fp = fopen("/home/logging/filedelete.log", "a");
    fwrite($fp, $logstring);
    fclose($fp);

    echo htmlentities($logstring, ENT_QUOTES);

然而，即使这样也不是没有缺陷的。如果您的认证系统允许用户去创建自己的用户登录，而用户选择了“../etc/"，系统就会再次暴露。出于这个原因，你可能
更偏好于写一个更定制的检查：

Example #4 更安全的文件名检查
    <?php
    $username     = $_SERVER['REMOTE_USER']; // using an authentication mechanisim
    $userfile     = $_POST['user_submitted_filename'];
    $homedir      = "/home/$username";

    $filepath     = "$homedir/$userfile";

    if (!ctype_alnum($username) || !preg_match('/^(?:[a-z0-9_-]|\.(?!\.))+$/iD', $userfile)) {
        die("Bad username/filename");
    }

    //etc...
    ?>

取决于你的操作系统，有很多你需要去关注的文件，包括设备记录（/dev/ 或 COM1）、配置文件（/etc/ 文件和 .ini 文件）、众所周知的文件存储区域（
/home/， My Documents）等等。出于这个原因，创建一种除了显式允许的内容以外所有内容都是禁止的策略通常更容易。
