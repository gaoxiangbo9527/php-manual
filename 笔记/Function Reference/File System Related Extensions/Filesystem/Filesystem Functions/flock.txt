描述
    flock ( resource $handle , int $operation [, int &$wouldblock ] ) : bool

    flock() 允许你执行一个简单的读者/写者模型，它几乎可以在每个平台上使用（包括大多数 Unix 衍生物，甚至 Windows）。

    在 5.3.2 之前的 PHP 版本上，该锁也会被 fclose() 释放（在脚本完成时也会自动的调用）。

    PHP 以一种咨询的方式（这意味着所有访问程序必须使用相同的方式锁定，否则它将不会工作）支持一种可移植的锁定完整文件的方法。默认情况下，此函
    数会阻塞直到得到所请求的锁；这可以使用下面描述的 LOCK_NB 选项进行控制。

参数
    handle
        一个通常使用 fopen() 创建的文件系统指针 资源 。
    operation
        操作是下列之一：
            LOCK_SH 去获取一个共享锁（读者）。
            LOCK_EX 去获取一个排它锁（写者）。
            LOCK_UN 去释放一个锁（共享锁或排它锁）

        如果你不想让 flock() 在锁定时阻塞，还可能将 LOCK_NB 作为一个位掩码添加到上述操作之一。
        个人补充：LOCK_NB 参数表示加锁时如果被阻塞，则立即返回 FALSE，而不是等待。
    wouldblock
        如果锁会阻塞（EWOULDBLOCK errno 条件），那么可选的第三个参数会设置为 1 。
        个人补充：这是一个输出参数，可以获取加锁时是否会被阻塞。

返回值
    成功时返回 TRUE，失败时返回 FALSE 。

更新日志
    版本	            描述Description
    5.5.22，5.6.6	增加了对 Windows 上的 wouldblock 参数的支持。
    5.3.2           删除了文件的资源句柄被关闭时自动解锁的行为。现在，解锁必须总是手动完成。

注意事项
    注意：在 Windows 上，flock() 使用强制锁定，而不是咨询锁定。在基于 Linux 和 System V 的操作系统上也支持强制锁定，通过 fcntl() 系统
    调用所支持的通常机制：也就是说，如果有问题的文件设置了 setgid 权限位并且清除了组执行位的话。在 Linux 上，还需要使用 mand 选项挂载文件
    系统，这样才能工作。

    注意：由于 flock() 需要一个文件指针，你可能必须使用一个特殊的锁文件来保护你打算以写入模式打开（对 fopen() 使用 "w" 或 "w+" 参数）并
    截断的文件的访问。

    注意：仅能用在由 fopen() 为本地文件返回的文件指针上，或指向实现了 streamWrapper::stream_lock() 方法的用户空间流的文件指针上。

    警告 在后续代码中分配另一个值给 handle 参数将释放锁。

    警告
        在一些操作系统上，flock() 是在进程级别实现的。当使用像 ISAPI 这样的多线程服务器 API 时，你可能无法依赖 flock() 来保护文件不受同
        一服务器实例的并行线程中运行的其他 PHP 脚本的影响!

        像 FAT 这样陈旧的文件系统不支持 flock()，因此，在这些环境中，总是返回 FALSE 。
