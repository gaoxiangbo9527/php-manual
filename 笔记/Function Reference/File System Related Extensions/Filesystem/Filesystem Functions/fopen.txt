描述
    fopen ( string $filename , string $mode [, bool $use_include_path = FALSE [, resource $context ]] ) : resource

    fopen() 绑定一个由 filename 指定的命名资源到一个流。

参数
    filename
        如果 filename 的形式是 "scheme://..." ，它被假定为一个 URL ，PHP 将搜索该方案的协议处理程序（也称为包装器）。如果没有为该协议
        注册包装器，PHP 将发出一个通知，以帮助你跟踪脚本中潜在的问题，然后继续，仿佛 filename 指定了一个常规的文件。
        个人测试：如果使用一个没有注册的包装器，PHP 将发出一个警告，而不是通知。

        如果 PHP 已确定 filename 指定了一个本地文件，那么它将尝试在该文件上打开一个流。该文件必须对 PHP 可访问，因此你需要确保该文件的访
        问权限允许这种访问。如果你已经启用了 安全模式 或 open_basedir ，那么会应用更进一步的限制。

        如果 PHP 已确定 filename 指定了一个已注册的协议，并且该协议已注册为一个网络 URL，那么 PHP 将检查以确保 allow_url_fopen 是启用
        的。如果它是关闭的，PHP 将发出一个警告并且该 fopen 调用将会失败。

        注意：支持的协议的列表可以在 支持的协议和包装器 中找到。一些协议（也称为包装器）支持 context 和/或 php.ini 选项。请参考正在使用的
        协议的特定页面，以获得可设置的选项列表（例如被 http 包装器所使用的 php.ini 值 user_agent ）。

        在 Windows 平台上，小心转义在到文件的路径中所使用的反斜线，或者使用正斜线。

        <?php
        $handle = fopen("c:\\folder\\resource.txt", "r");
        ?>
    mode
        mode 参数指定你需要访问流的类型。它可能是下列任何一种：

        fopen() 所用的模式的一份可能的模式列表
        模式     描述
        'r'	    打开为只读取；把文件指针放在该文件的开头。
        'r+'	打开为读取和写入；把文件指针放在该文件的开头。
        'w'	    打开为只写入；把文件指针放在该文件的开头并将该文件截断到零长度。如果该文件不存在，则尝试创建它。
        'w+'	打开为读取和写入；把文件指针放在该文件的开头并将该文件截断到零长度。如果该文件不存在，则尝试创建它。
        'a'	    打开只为写入；把文件指针放在该文件的末尾。如果该文件不存在，则尝试创建它。在这种模式下，fseek() 没有效果，写入总是被追加。
        'a+'	打开为读取和写入；把文件指针放在该文件的末尾。如果该文件不存在，则尝试创建它。在这种模式下，fseek() 只影响读取位置，写入
                总是被追加。
        'x'	    创建并打开为只写入；把文件指针放在该文件的开头。如果该文件已经存在，该 fopen() 调用将会失败，会返回 FALSE 并生成一个级别
                为 E_WARNING 的错误。如果该文件不存在，则尝试创建它。这相当于为底层的 open(2) 系统调用指定了 O_EXCL|O_CREAT 标志。
        'x+'	创建并打开为读取和写入；除此之外它的行为与 'x' 相同。
        'c'	    打开文件为只写入；如果该文件不存在，则创建它。如果它存在，它既不截断（和 'w' 相反），该函数的调用又不会失败（就像 'x' 的
                情况一样）。文件指针指向文件的开头。如果希望在尝试修改该文件之前获得一个劝告锁（参见 flock()），这可能会很有用，因为使用
                'w' 会在获得锁之前截断文件（如果需要截断文件，可以在请求锁之后使用 ftruncate()）。
        'c+'	打开文件为读取和写入；除此之外它的行为与 'c' 相同。
        'e'	    在被打开的文件描述符上设置 close-on-exec 标志。仅在符合 POSIX.1-2008 系统上编译的 PHP 中可用。

        注意：
            不同的操作系统家族有不同的行结束惯例。当你写入一个文本文件并希望插入一个断行时，你需要为你的操作系统使用正确的行结束符。基于
            Unix 的系统使用 \n 作为行结束符，基于 Window的系统使用 \r\n 作为行结束符，基于 Macintosh 的系统（Mac OS Classic）使用
            \r 作为行结束字符。

            如果你在写入文件时使用了错误的行结束符，你可能会发现其他打开这些文件的应用程序“看起来很有意思”。

            Windows 提供了一个文本模式转换标志（'t'），当与文件一起使用时，它会透明地将 \n 转换为 \r\n 。相反，你还可以使用 'b' 强制执
            行二进制模式，该模式不会转换你的数据。要使用这些标志，请指定 'b' 或 't' 作为 mode 参数的最后一个字符。

            默认的翻译模式是 'b'。如果你正在处理纯文本文件并且在脚本中使用 \n 分隔行尾，则可以使用 't' 模式，但是除非希望你的文件能够被旧
            版本的记事本等应用程序读取。在其他情况下都应该用 'b' 。

            如果在处理二进制文件时指定了 't' 标志，那么你可能会在处理数据时遇到奇怪的问题，包括损坏的镜像文件以及关于 \r\n 字符的奇怪问题。

        注意：为了可移植性，还强烈建议重写使用或依赖 't' 模式的代码，以便代码使用正确的行结束符和 'b' 模式。

    use_include_path
        如果你还想在 include_path 中搜索该文件，那么可以把可选的第三个参数 use_include_path 设置为 '1' 或 TRUE 。
        个人补充：include_path，从名字可以看出，默认只会用于 include 和 require 这种文件包含，而不会默认应用于 fopen() 或 file() 这
        种文件打开操作，但是主要的几个文件打开函数都有启用 include_path 的选项，不过默认都是没开启的，需要你手动开启。
    context
        注意：PHP 5.0.0 添加了上下文支持。有关上下文的描述，请参考 流 。

返回值
    成功时返回一个文件指针资源，失败时返回 FALSE 。

错误/异常
    失败时，将发出一个 E_WARNING 警告。

更新日志
    版本	            描述
    7.0.16，7.1.2	添加了 'e' 选项。
    5.2.6	        添加了 'c' 和 'c+' 选项。

注意事项
    警告
        当使用 SSL 时，Microsoft IIS 将违反协议，通过关闭连接而不发送 close_notify 指示器。当你到达数据的末尾时，PHP 将这报告为
        "SSL: Fatal Protocol Error" 。要解决这个问题，error_reporting 的值应该被降低到不包含警告级别。当你使用 https:// 包装器打开
        流时，PHP 可以检测到错误的 IIS 服务器软件，并将抑制该警告。当使用 fsockopen() 创建 ssl:// 套接字时，开发人员负责检测和抑制此警
        告。

    注意：当启用 安全模式 时，PHP 会检查脚本正在操作的目录与正在执行的脚本是否具有相同的 UID（所有者）。

    注意：如果你遇到了读写文件方面的问题，并且使用的是服务器模块版本的 PHP，请记住确保服务器进程可以访问你所使用的文件和目录。

    注意：当 filename 为目录时，此函数也可能会成功。如果不确定 filename 是一个文件还是一个目录，你可能需要在调用 fopen() 之前使用
    is_dir() 函数。

