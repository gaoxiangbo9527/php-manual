描述
    mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] ) : int

    根据指定的参数返回 Unix 时间戳。该时间戳是一个长整型，包含了从 Unix 纪元（January 1 1970 00:00:00 GMT）到指定时间之间的秒数。

    参数可以按从右到左的顺序被省略。任何被省略的参数将根据本地日期和时间设置为当前值。

注意事项
    注意：从 PHP 5.1 开始，当不使用参数调用时，mktime() 会抛出一个 E_STRICT 通知：应使用 time() 函数。

参数
    hour
        相对于由 month，day，和 year 所指定的天的开始时间的小时数。负值指的是目标天的午夜前的小时。大于 23 的值指的是后续天中适当的时间。
    minute
        相对于 hour 的开始时间的分钟数。负值指的是前面的小时中的分钟。大于 59 的值指的是后续小时中适当的分钟。
    second
        相对于 minute 的开始时间的秒数。负值指的是前面的分钟中的秒。大于 59 的值指的是后续分钟中适当的秒。
    month
        相对于前一年结束时间的月数。值 1 到 12 指的是目标年的常规的日历月份。小于 1 的值（包括负值）指的是前面的年中的月份，以相反的顺序，
        所以 0 是 12 月，-1 是 11 月，以此类推。大于 12 的值指的是后续年中适当的月份。
    day
        相对于上个月结束时间的天数。值 1 到 28，29，30 或 31（取决于月份）指的是相关月份中正常的天。小于 1 的值（包括负值）指的是前面的月
        份中的天，所以 0 是上个月的最后一天，-1 是上个月的倒数第二天，以此类推。超过相关月份天数的值指的是后续月中适当的天。
    year
        年的数值，可以使两位或者四位数字值，位于 0-69 之间的值会映射到 2000-2069 并且 70-100 会映射到 1970-2000。在 time_t 为 32 位
        有符号整数的系统上，正是今天最常见的情况，year 有效的范围大概在 1901 年到 2038 年之间。然而，在 PHP 5.1.0 之前，在一些系统上（
        比如 Windows）,这个范围被限制在了 1970 到 2038 之间。
    is_dst
        因为已经被废弃和移除了，所以不翻译了。

        注意：从 PHP 5.1.0 开始，该参数变为被废弃状态。因此，应该使用新的时区处理特性。

        注意：在 PHP 7.0.0 中，该参数已经被移除了。

返回值
    mktime() 会返回指定参数的 Unix 时间戳。如果参数是无效的，该函数会返回 FALSE （PHP 5.1 前会返回 -1）。

错误/异常
    如果时区是无效的，那么每一个对日期/时间函数的调用将会生成一个 E_NOTICE ，如果使用系统设置或者 TZ 环境变量，且/或生成一个 E_STRICT 或
    E_WARNING 消息，另请参阅 date_default_timezone_set() 。

变更日志
    版本     描述
    7.0.0   is_dst 参数已经被移除了。
    5.3.0	如果 is_dst 参数被使用，mktime() 现在会抛出 E_DEPRECATED 通知。
    5.1.0	is_dst 参数变为被废弃状态。该函数在发生错误时会返回 FALSE ，而不是 -1 。修正了该函数，使得年、月、日都可以接受 0 。
    5.1.0	当不使用参数调用时，mktime() 会抛出 E_STRICT 通知。应使用 time() 函数。
    5.1.0   现在会产生 E_STRICT 和 E_NOTICE 时区错误。

注意事项
    小心 在 PHP 5.1.0 之前，任何已知版本的 Windows 和其他一些系统都不支持负时间戳。因此，有效年的范围限于 1970 年至 2038 年。
