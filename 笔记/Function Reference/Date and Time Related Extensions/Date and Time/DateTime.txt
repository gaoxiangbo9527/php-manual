介绍
    日期和时间的表示。

类摘要
    DateTime implements DateTimeInterface {
        /* Inherited constants */
        const string DateTimeInterface::ATOM = "Y-m-d\TH:i:sP" ;
        const string DateTimeInterface::COOKIE = "l, d-M-Y H:i:s T" ;
        const string DateTimeInterface::ISO8601 = "Y-m-d\TH:i:sO" ;
        const string DateTimeInterface::RFC822 = "D, d M y H:i:s O" ;
        const string DateTimeInterface::RFC850 = "l, d-M-y H:i:s T" ;
        const string DateTimeInterface::RFC1036 = "D, d M y H:i:s O" ;
        const string DateTimeInterface::RFC1123 = "D, d M Y H:i:s O" ;
        const string DateTimeInterface::RFC7231 = "D, d M Y H:i:s \G\M\T" ;
        const string DateTimeInterface::RFC2822 = "D, d M Y H:i:s O" ;
        const string DateTimeInterface::RFC3339 = "Y-m-d\TH:i:sP" ;
        const string DateTimeInterface::RFC3339_EXTENDED = "Y-m-d\TH:i:s.vP" ;
        const string DateTimeInterface::RSS = "D, d M Y H:i:s O" ;
        const string DateTimeInterface::W3C = "Y-m-d\TH:i:sP" ;

        /* Methods */
        public __construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
        public add ( DateInterval $interval ) : DateTime
        public static createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] ) : DateTime
        public static createFromImmutable ( DateTimeImmutable $datetime ) : DateTime
        public static getLastErrors ( void ) : array
        public modify ( string $modify ) : DateTime
        public static __set_state ( array $array ) : DateTime
        public setDate ( int $year , int $month , int $day ) : DateTime
        public setISODate ( int $year , int $week [, int $day = 1 ] ) : DateTime
        public setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] ) : DateTime
        public setTimestamp ( int $unixtimestamp ) : DateTime
        public setTimezone ( DateTimeZone $timezone ) : DateTime
        public sub ( DateInterval $interval ) : DateTime
        public diff ( DateTimeInterface $datetime2 [, bool $absolute = FALSE ] ) : DateInterval
        public format ( string $format ) : string
        public getOffset ( void ) : int
        public getTimestamp ( void ) : int
        public getTimezone ( void ) : DateTimeZone
        public __wakeup ( void )
    }

更新日志
    版本         描述
    7.2.0	    DateTime 的类常量现在被定义在 DateTimeInterface 上。
    7.0.0	    添加常量：DATE_RFC3339_EXTENDED 和 DateTime::RFC3339_EXTENDED 。
    5.5.0	    该类现在实现了 DateTimeInterface 。
    5.4.24	    COOKIE 常量被更改为使用四位数年份来反映 RFC 1036，而不像以前的版本使用两位数年份（RFC 850）。
    5.2.2       使用比较运算符比较 DateTime 对象被更改为按期望的那样工作。在这之前，所有的 DateTime 对象被认为是相等的（使用 ==）。

目录
    public DateTime::__construct ([ string $time = "now" [, DateTimeZone $timezone = NULL ]] )
        返回新的 DateTime 对象。

        timezone
            注意：如果 $time 参数是一个 Unix 时间戳（例如 @946684800）或者指定了一个时区（例如 2010-01-28T15:00:00+02:00），那么
            $timezone 参数和当前时区会被忽略。如果 $time 参数是一个 Unix 时间戳，那么时区会被设置为 UTC 时区。
    public static DateTime::createFromFormat ( string $format , string $time [, DateTimeZone $timezone ] ) : DateTime
        按照指定的格式去解析一个时间字符串。

        format
            格式化选项如下。大多数情况下，可以使用与 date() 相同的字母。

            在 format 参数字符串中，可以识别下面的这些字符
            格式化字符                   描述                                 可解析值的示例
            天	                        ---	                                ---
            d                           月中的日期，带有前导 0 的数字           01 到 31
            j	                        月中的日期	                        1 到 31
            D                           日期的一种文本化表示                   Mon 到 Sun
            l	                        日期的一种文本化表示                   Sunday 到 Saturday
            S	                        英语序号后缀，表示某月的某一天，         st，nd，rd 或 th
                                        2 个字符，它在处理时被忽略
            z	                        年中的日期（从 0 开始）                0 through 365

            月份	                        ---	                                ---
            F                           月份的一种文本化表示，例如 January      January 到 December
                                        或者 Sept
            M	                        月份的一种文本化表示，例如 January      Jan 到 Dec
                                        或者 Sept
            m                           月份的数值化表示，带有前导 0            01 到 12
            n	                        月份的数值化表示，不带前导 0	        1 到 12

            年份	                        ---                                 ---
            Y	                        年份的一种完整的数值化表示，4 位数字     示例：1999 或 2003
            y	                        年份的一种两位数字的表示（它假设年份在    示例：99 或 03（它们会被分别解析为 1999 和 2003）
                                        1970-2069内，包含收尾）

            时间	                        ---	                                ---
            a                           上午                                 am
            A		                    下午                                 pm
            g                           12 小时格式的小时，不带前导 0           1 到 12
            h	                        12 小时格式的小时，带前导 0             01 到 12
            G                           24 小时格式的小时，不带前导 0           0 到 23
            H	                        24 小时格式的小时，带前导 0             00 到 23
            i	                        带前导 0 的分钟                       00 到 59
            s	                        秒，带有前导 0                        00 到 59
            v	                        毫秒（最多三位数）                     示例：12，345
            u	                        微秒（最多六位数）                     示例：45，654321

            时区	                        ---	                                ---
            e                           时区标识符                           示例：UTC，GMT，Atlantic/Azores
            O                           和格林尼治时间（GMT）的差值，小时和分钟  示例：+0200
                                        之间没有冒号
            P                           和格林尼治时间（GMT）的差值，小时和分钟  示例：+02:00
                                        之间有冒号
            T                           时区缩写                             示例：EST，MDT

            完整的 日期/时间              ---	                                ---
            U	                        Unix 纪元（January 1 1970            示例：1292177455
                                        00:00:00 GMT）以来的秒数)

            个人补充：从这里往上的格式化字符都可以被 date() 识别。

            空白 和 分隔符	            ---	                                ---
            (空格)	                    一个空格或者一个制表符                 示例：
            #	                        下面这些分隔符中的一个：;，:，/，.，     示例：/
                                        ,，-，(or)
            ;，:，/，.，,，-，(or)        指定的字符	                        示例：-
            ?	                        一个随机的字节	                    示例：^（注意对于 UTF-8 字符来说，你可能需要超过一
                                                                            个的 ? 。在这种情况下，你可能想要使用的是 * ）
            *	                        多个随机字节，直到下一个分隔符或数字	    示例：Y-*-d 中的 * 将会匹配字符串 2009-aWord-08
                                                                            中的 aWord
            !	                        重置所有字段到 Unix 纪元（年，月，日，   没有 ! ，那么所有字段都会被设置为当前日期和时间。
                                        时，分，秒，小数部分以及时区信息）
            |	                        对于还没有解析的字段，将它们重置为 Unix   Y-m-d| 将会设置年，月和日为字符串中发现的带解析的
                                        纪元（年，月，日，时，分，秒，小数部分以   信息，并且把小时，分和秒设置为 0
                                        及时区信息）
            +	                        如果出现此格式说明符，则字符串中的尾随数   使用 DateTime::getLastError() 查明是否存在尾随
                                        据将不会导致错误，而是警告               数据。

            格式字符串中未识别的字符将会导致解析失败并且错误消息会附加到返回结构中。你可以使用 DateTime::getLastErrors() 查询错误消息。
            想要在 format 中包含字面量字符，你必须使用一个反斜线（\）转义它们。
            如果 format 不包含字符 ! ，那么被生成的时间中没有在 format 中指定的部分将设置为当前系统时间。
            如果 format 包含字符 ! ，那么被生成的时间中没有在 format 中提供的部分，以及 ! 左侧的值将会被设置为 Unix 纪元的相应部分。

    public static DateTime::createFromImmutable ( DateTimeImmutable $datetime ) : DateTime
        返回封装了指定 DateTimeImmutable 对象的新的 DateTime 对象。
    public static DateTime::getLastErrors ( void ) : array
        返回在解析一个日期/时间字符串时发现的警告和错误信息的数组。
    public DateTime::add ( DateInterval $interval ) : DateTime
        将一些天数、月数、年数、小时数、分钟数和秒数加到一个 DateTime 对象上。
    public DateTime::modify ( string $modify ) : DateTime
        按 strtotime() 接受的格式递增或递减，来改变 DateTime 对象的时间戳。
    public static DateTime::__set_state ( array $array ) : DateTime
        __set_state 处理程序。
    public DateTime::setDate ( int $year , int $month , int $day ) : DateTime
        将 DateTime 对象的当前日期部分重新设置为一个不同的日期。
    public DateTime::setISODate ( int $year , int $week [, int $day = 1 ] ) : DateTime
        根据 ISO 8601 标准设定一个日期 —— 使用周和日的偏移量，而不是具体的日期。
    public DateTime::setTime ( int $hour , int $minute [, int $second = 0 [, int $microseconds = 0 ]] ) : DateTime
        将 DateTime 对象的当前时间部分重新设置为一个不同的时间。
    public DateTime::setTimestamp ( int $unixtimestamp ) : DateTime
        基于一个 Unix 时间戳设置一个日期和时间。
    public DateTime::setTimezone ( DateTimeZone $timezone ) : DateTime
        为 DateTime 对象设置一个新的时区。
    public DateTime::sub ( DateInterval $interval ) : DateTime
        将一些天数、月数、年数、小时数、分钟数和秒数从一个 DateTime 对象上减去。
