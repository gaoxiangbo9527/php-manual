描述
    password_hash ( string $password , mixed $algo [, array $options ] ) : string

    password_hash() 使用一种强单向散列算法去创建一个新的密码散列。password_hash() 是与 crypt() 相兼容的。因此，由 crypt() 创建的密码
    散列可以被用于 password_hash() 。

    下面的算法是当前支持的算法：
        PASSWORD_DEFAULT - 使用 bcrypt 算法（从 PHP 5.5.0 起默认）。注意，这个常量被设计成会随时间改变，因为新的和更强的算法会被添加到
        PHP 中。出于这个原因，使用这个标识符的结果的长度会随时间发生变化。因此，建议将结果存储在可以扩展到 60 个字符以上（255 个字符会是一
        个好的选择）的数据库列中。
        PASSWORD_BCRYPT - 使用 CRYPT_BLOWFISH 算法去创建散列。这将使用 "$2y$" 标识符去生成一个标准的 crypt() 兼容的散列。结果将总是
        一个 60 个字符的字符串，或者失败时为 FALSE 。
        PASSWORD_ARGON2I - 使用 Argon2i 散列算法去创建散列。此算法仅在 PHP 被编译去带有 Argon2 支持时可用。
        PASSWORD_ARGON2ID - 使用 Argon2id 散列算法去创建散列。此算法仅在 PHP 被编译去带有 Argon2 支持时可用。

    PASSWORD_BCRYPT 所支持的选项：
        salt (string) - 当散列密码时，手动的提供一个要使用 salt 。注意，这将会覆盖并且阻止自动的创建一个 salt 。
            如果省略，password_hash() 将会为每一个密码散列生成一个随机的 salt 。这是符合预期的运算模式（个人补充：就是在说，我们平时就应
            该这么做）。

            警告 从 PHP 7.0.0 开始，salt 选项已经被废弃了。现在，最好只使用默认生成的 salt 。
        cost (integer) - 表示应该使用的算法成本。这些值的例子可以在 crypt() 页面上找到。

            如果省略，将会使用默认值 10 。这是一个很好的成本底线，但是你可能会根据你的硬件去考虑增加它。

    PASSWORD_ARGON2I 和 PASSWORD_ARGON2ID 所支持的选项：
        memory_cost (integer) - 可用于去计算 Argon2 散列的最大内存（单位为 kb）。默认为 PASSWORD_ARGON2_DEFAULT_MEMORY_COST 。
        个人补充：这里的单位和预定义常量页面中的单位不一样，使用时要注意。

        time_cost (integer) - 可花费去计算 Argon2 散列的最大时间。默认为 PASSWORD_ARGON2_DEFAULT_TIME_COST 。

        threads (integer) - 用于去计算 Argon2 散列的线程数。默认为 PASSWORD_ARGON2_DEFAULT_THREADS 。

参数
    password
        用户的密码。

        小心 使用 PASSWORD_BCRYPT 作为算法，将会导致 password 参数被截断到 72 个字符的最大长度。
    algo
        一个表示在散列密码时所使用的算法的 密码算法常量 。
    options
        一个包含着选项的关联数组。关于每个算法所支持的选项的文档，请查看 密码算法常量 。

        如果省略，将会创建一个随机的 salt 并且会使用默认的 cost 。

返回值
    返回散列后的密码，或者失败时返回 FALSE 。

    使用的算法，cost 和 salt 会作为散列的一部分被返回。因此，所有验证散列所需要的信息都已经被包含在散列自身中了。这允许 password_verify()
    函数去验证散列，而不需要单独的存储 salt 和算法信息。

变更日志
    版本	        描述
    7.4.0	    algo 参数现在期望的是一个字符串，但为了向后兼容，仍然接受整数。
    7.3.0	    添加了对使用 PASSWORD_ARGON2ID 的 Argon2id 密码的支持。
    7.2.0	    添加了对使用 PASSWORD_ARGON2I 的 Argon2i 密码的支持。

注意事项
    小心 强烈建议你不要去为这个函数生成你自己的 salt 。如果你没有指定一个 salt，它将会自动的为你创建一个安全的 salt 。如上面已经看到的那样
    ，在 PHP 7.0 中提供 salt 选项将会生成一个已废弃的警告。对手动提供一个 salt 的支持可能会在将来的 PHP 版本中被移除。

    注意：建议你在你的服务器上测试这个函数并且调整 cost 参数，从而使在交互式系统上，该函数的执行时间少于 100 毫秒。上面例子中的脚本可以帮助
    你去为你的硬件选择一个好的 cost 值。

    注意：此函数对支持的算法的更新（或对默认算法的更改）必须遵循以下规则：
        任何新的算法，在成为默认算法之前，都必须在核心中至少一个完整的 PHP 版本。举个例子，如果一个新的算法在 7.5.5 中被添加，那么直到 PHP
        7.7（因为 7.6 会是第一个完整的版本），它都没有资格成为默认算法。但是如果一个不同的算法在 7.6.0 中被添加，它也将在 7.7.0 有资格成
        为默认算法。

        默认算法只应该在一个整版本（7.3.0，8.0.0 等）中而不能在一个修订版本中更改。这个规则唯一的例外是在当前默认的算法中发现了严重的安全缺
        陷的紧急情况。
