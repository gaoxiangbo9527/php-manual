描述
    PHP 5 和 7
        assert ( mixed $assertion [, string $description ] ) : bool
    PHP 7
        assert ( mixed $assertion [, Throwable $exception ] ) : bool

    assert() 会检查给定的 assertion 并且如果它的结果是 false 时会采取相应的操作。

传统的断言（PHP 5 和 7）
    如果 assertion 是一个字符串，那么它会被 assert() 当作 PHP 代码去评测。
    如果 assertion 是一个布尔条件，那么这个条件不会显示为你通过 assert_options() 定义的断言函数的参数。在调用处理函数之前，该条件会被转
    换为字符串，false 会被转换为空字符串。
    (个人补充)如果 assertion 是一个布尔条件，会先求值，如果是真，就不会调用 assert_options() 定义的断言失败处理函数，如果是假，也会先被
    转换为空字符串了，也看不到原始的布尔条件长什么样，所以上面才说“如果 assertion 是一个布尔条件，那么这个条件不会显示为你通过
    assert_options() 定义的断言函数的参数”。

    断言只应该当作一个调试特性使用。你可以使用它们来进行完整性检查：测试应该始终为 TRUE 的条件，而且如果不为 TRUE，则指出一些编程错误；或者
    检查是否存在某些特性，如扩展函数或某些系统限制和特性。

    断言不应该用于常规的运行时操作，比如输入参数检查。一般来说，即使断言检查没有被激活，你的代码也应要能够正常工作。

    assert() 的行为可以通过 assert_options() 函数或该函数手册页中描述的 .ini 设置项来配置。

    assert_options() 函数和（或） ASSERT_CALLBACK  配置指令能够设置一个回调函数去处理失败的断言。

    assert() 的回调对于构建自动化测试套件特别有用，因为它允许您轻松捕获传递给断言的代码，还会给出关于在何处作出断言的信息。
    虽然这些信息也可以通过其他方法捕获，但是通过断言会更快速和容易。
    回调函数会接受三个参数。第一个参数将包含断言失败所在的文件。第二个参数将包含断言失败所在的行并且第三个参数将包含失败的表达式（诸如 1 或者
     "two"这样的字面量值不会通过这个参数被传递）。PHP 5.4.8 或者 更新版本的用户还可能提供第四个可选的参数，它会包含给 assert() 的
     description 参数指定的值，如果有指定的话。
期望 (仅 PHP 7)
    在 PHP 7 中 assert() 是一个语言结构，允许定义期望：在开发和测试环境中生效的断言，但是在生产环境中优化后成本为零。

    由于向后兼容性的原因，assert_options() 仍然可以用于控制前述的行为，但是仅用于 PHP 7 的代码应该使用两个新的配置指令去控制 assert()
    的行为，而不是调用 assert_options() 。

    用于 assert() 的 PHP 7 配置指令
    指令                  默认值     可能的值
    zend.assertions      1          1: 生成和执行代码（开发模式）
                                    0: 生成代码，但是在运行时跳过它
                                    -1: 不生成代码 （生产模式）
    assert.exception	 0          0: 如果提供了 exception 参数则使用该对象，反之生成一个 Throwable 对象（应该是 AssertionError
                                    ），但只根据该对象生成警告，而不是抛出它（与PHP 5行为兼容）
                                    1: 当断言失败时抛出异常，如果提供了 exception 参数，则抛出 exception 提供的异常对象，如果没有提
                                    供 exception 参数，则抛出一个新的 AssertionError 对象。
参数
    assertion
        断言。在 PHP 5 中，它必须是一个待评测的字符串或者待测试的布尔值。在 PHP 7 中，它可以是任意一个会返回值的表达式，该表达式会被执行，
        而且其值会用于指定断言是成功还是失败。
        警告： 从 PHP 7.2 开始，使用字符串作为 assertion 是被废弃的。
    description
        一个可选的描述，当 assertion 失败时，它会被包含进失败的信息中。
        个人补充：如果没指定该参数，该参数的默认值竟然是断言函数调用的整条语句的字符串表示。
    exception
        在 PHP 7 中，第二个参数可以是一个 Throwable 类型的对象，而不是描述性字符串。如果断言失败且 assert.exception 配置指令是被启用的
        ，就会抛出该对象。
返回值
    断言失败返回 FALSE ，反之返回 TRUE 。
更新日志
    版本        描述
    7.2.0	    使用字符串作为 assertion 成为被废弃的。当 assert.active 和 zend.assertions 设置为 1 时，它现在会产生一条
                E_DEPRECATED 通知。
    7.0.0	    assert() 现在是一个语言结构而不是一个函数。assertion 现在可以是一个表达式。现在第二个参数要么被解释为一个异常，如果指定
                的是一个 Throwable 对象的话；要么被解释为从 PHP 5.4.8 开始支持的描述。
    5.4.8	    添加了 description 参数。现在还将该描述提供给 ASSERT_CALLBACK 模式下的回调函数作为第四个参数。
