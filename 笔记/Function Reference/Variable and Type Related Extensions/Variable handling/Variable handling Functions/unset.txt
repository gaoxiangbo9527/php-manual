描述
    unset ( mixed $var [, mixed $... ] ) : void
    unset() 会销毁指定的一个或者多个变量。
    个人补充：销毁可不止是设置为 NULL ，变量会直接变成未声明。

    unset() 在函数中的行为取决于你尝试销毁的变量的类型。

    如果在函数中 unset() 一个全局变量，则只会销毁局部变量，而调用环境中的变量将保持调用 unset() 之前一样的值。
    要想在函数中 unset() 一个全局变量，可使用 $GLOBALS 数组来实现。
    如果在函数中 unset() 一个按引用传递的变量，则只会销毁局部变量，而调用环境中的变量将保持调用 unset() 之前一样的值。
    个人补充：global 关键字感觉就是使用的引用的方式引用的全局变量，也就是局部变量就是全局变量的一个引用而已。
    如果在函数中 unset() 一个静态变量，则 unset() 只会在该变量仅会在该函数剩余的上下文中被销毁（即该函数本次调用的剩余上下文）。后续的调用
    会复原此静态变量之前的值。
    个人补充：静态变量应该是在编译时创建在函数定义作用域中的，而每次调用该函数遇到 static 声明时，就会在本次函数调用作用域中建立一个变量，而
    该变量是该函数定义作用域中同名变量的引用。

    个人补充：上面的几种情况，说到底就是 unset() 一般只会销毁当前作用域中的变量，而不会级联销毁高层作用域中的同名变量。

参数
    var
        被取消设置的变量。
    ...
        另外一个或者多个被取消设置的变量。

返回值
    没有值会被返回。

注意事项
    注意：因为它是一个语言结构而不是一个函数，所以不能使用 变量函数 调用它。
    注意：unset() 甚至可以取消设置当前上下文中可见的对象属性。
    注意：在对象方法中不能够取消设置 $this 。
    注意：当在一个不可访问的对象属性上使用 unset() 时，_unset() 重载方法（解释器钩子）会被调用，如果已声明的话。

