PDO 提供了 3 种不同的错误处理策略供你选择，以适合你的应用程序的开发风格。

PDO::ERRMODE_SILENT
    这是默认的模式。PDO 将为你简单地设置错误代码，以使用 errorCode() 和 errorInfo() 方法在语句和数据库对象上进行检查；如果错误是由对语句
    对象的调用导致的，你可以在该对象上调用 PDOStatement::errorCode() 或 PDOStatement::errorInfo() 方法。如果错误是由对数据库对象的调
    用导致的，则应该对数据库对象调用这些方法。

PDO::ERRMODE_WARNING
    除了设置错误代码，PDO 将会生成一个传统的 E_WARNING 消息。此设置在调试/测试期间非常有用，如果你只想查看发生了什么问题而不想中断应用程序
    的执行流程的话。

PDO::ERRMODE_EXCEPTION
    除了设置错误代码，PDO 将会抛出一个 PDOException 并且会设置其属性以反映错误代码和错误信息。此设置在调试期间也非常有用，因为它会在出现错
    误时有效地“放大”脚本，很快就可以指出代码中潜在的问题区域（记住：如果异常导致脚本终止，事务就会自动的回滚）。

    异常模式也很有用，因为与传统的 php 风格的警告相比，你可以更清晰地构造错误处理，并且与在静默模式下运行相比，代码/嵌套会更少，并且可以显式
    的检查每一个数据库调用的返回值。

    有关 PHP 异常的更多信息，请参见 异常 。

PDO 使用 SQL-92 SQLSTATE 错误代码字符串进行标准化；各个 PDO 驱动程序负责将它们的原生代码映射到适当的 SQLSTATE 代码。PDO::errorCode()
方法会返回单个 SQLSTATE 代码。如果你需要关于错误的更具体的信息，PDO 也提供了 PDO::errorInfo() 方法，它会返回一个包含 SQLSTATE 代码，驱
动程序特定的错误代码和错误字符串的数组。

注意：不论 PDO::ATTR_ERRMODE 当前设置为何，如果连接失败，PDO::__construct() 将总是会抛出一个 PDOException 。未捕获的异常是致命的。
