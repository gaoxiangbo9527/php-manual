连接是通过创建 PDO 这个基类的实例来建立的。不管你想使用哪个驱动程序；你总会用到 PDO 这个类名。构造方法接受用于指定数据源（被称为DSN）的参数
和可选的用于指定用户名和密码（如果有的话）的参数。

如果遇到任何连接错误，则将抛出一个 PDOException 对象。如果你想要处理该错误条件，那么你可以去捕获该异常，或者你也可以选择将它留给通过
set_exception_handler() 设置的应用程序全局异常处理程序。

警告 如果你的应用没有捕获到从 PDO 构造方法中抛出的异常，那么 zend 引擎采取的默认操作是终止脚本并显示一个回溯。此回溯可能会显示完整的数据库连
接细节，包括用户名和密码。捕获该异常是你的责任，要么显式地（通过 catch 语句）捕捉，要么隐式地通过 set_exception_handler() 捕捉。

一旦成功的连接到了数据库，PDO 类的一个实例就会被返回给你的脚本。连接在该 PDO 对象的生命周期中保持激活状态。要想关闭该连接，需要通过确保删除
到该对象的所有剩余引用去销毁该对象 —— 可以通过把保持该对象的变量赋值为 NULL 来完成。如果你没有显式地这样做，PHP 将自动的在脚本结束时关闭该
连接。

注意：如果仍然有到该 PDO 实例的其它引用（例如从一个 PDOStatement 实例，或从引用相同 PDO 实例的其它变量），它们也必须被移除（例如，通过将
NULL 赋值给引用该 PDOStatement 的变量）。

许多 web 应用程序将受益于与数据库服务器建立持久连接。持久连接不会在脚本结束时被关闭，而是会被缓存并且当另一个脚本使用相同的凭据请求一个连接时
会被重用。持久连接缓存可以让你避免每次脚本需要与数据库对话时去建立一个新连接的开销，从而得到一个更快的 web 应用程序。

PDO::ATTR_PERSISTENT 选项的值会被转换成布尔值（启用/禁用持久连接），除非它是一个非数值字符串，这种情况下它允许使用多个持久连接池。如果不同
的连接使用不兼容的设置，这是有用的，例如，PDO::MYSQL_ATTR_USE_BUFFERED_QUERY 的值不同。

注意：如果你希望使用持久连接，你必须在传递给 PDO 构造方法的驱动器选项数组中设置 PDO::ATTR_PERSISTENT。如果在对象实例化之后再通过
PDO::setAttribute() 设置该属性，驱动将不会使用持久连接。

注意：如果你正在使用 PDO ODBC 驱动并且你的 ODBC 库支持 ODBC 连接池（unixODBC 和 Windows 就是这样的；可能还有更多），那么建议你不要使用
持久的 PDO 连接，相反的，应将连接缓存留给 ODBC 连接池层。ODBC 连接池是和进程中其他模块共享的；如果 PDO 被告知去缓存该连接，那么该连接将永
远不会被返回给 ODBC 连接池，这将导致要创建其他连接来服务其他模块。
