反斜杠字符有许多种用途。首先，如果它后面跟着一个非字母数字字符，它就会带走该字符可能具有的任何特殊意义。这种把反斜杠用作转义字符的用法可用于字
符类的内部和外部。

例如，如果你想要匹配一个 "*" 字符，则在模式中写入 "\*" 即可。不论后面的字符是否将被解释为一个元字符，这都是适用的，所以在非字母数字前面加上
"\" 总是安全的，以指定它代表自己。特别是，如果你想匹配一个反斜杠，你可以写 "\\"。

注意：单引号和双引号的 PHP 字符串的反斜杠具有特殊的含义。因此如果必须将 \ 与正则表达式 \\ 匹配，则必须在 PHP 代码中使用 "\\\\" 或 '\\\\'。

如果使用 PCRE_EXTENDED 选项编译模式，模式中的空白字符（除字符类中的空白字符外）和字符类之外的 "#" 与下一个换行符之间的字符会被忽略。一个转
义反斜杠可以被用于去包含一个空白字符或者 "#" 字符作为模式的一部分。

反斜杠的第二种用法提供了一种以可视方式对模式中的非打印字符进行编码的方法。对于非打印字符的出现来说并没有限制，除了二进制 0 ，它会终止一个模式，
但当通过文本编辑准备一个模式时，使用以下转义序列通常比使用它所代表的二进制字符更容易：

\a
    警报，即 BEL 字符（十六进制 07）
\cx
    "control-x"，其中 x 是任意字符
\e
    换码（十六进制 1B）
\f
    换页（十六进制 0C）
\n
    换行（十六进制 0A）
\p{xx}
    一个具有 xx 属性的字符，更多信息见 unicode 属性
\P{xx}
    一个不具有 xx 属性的字符，更多信息见 unicode 属性
\r
    回车（十六进制 0D）
\R
    断行：匹配 \n，\r 和 \r\n
\t
    制表符（十六进制 09）
\xhh
    具有十六进制码 hh 的字符
\ddd
    具有八进制码 ddd 的字符，或反向引用

"\cx" 的精确效果如下：如果 "x" 是一个小写字母，它会被转换为大写。然后将字符的第 6 位（十六进制 40）反转。因此 "\cz" 变成了十六进制 1A，但
是 "\c{" 变成了十六进制 3B，而 "\c;" 变成了十六进制 7B。

"\x" 之后，最多会读取两个十六进制数字（字母可以是大写或者小写）。在 UTF-8 模式中，允许 "\x{...}"，其中大括号的内容是一个十六进制数字字符串。
它被解释为一个 UTF-8 字符，其编码是给定的十六进制数。原始的十六进制转义序列 \xhh，如果值大于 127，则匹配一个两字节的 UTF-8 字符。

"\0" 之后，最多再读取两个八进制数字。在两种情况下，如果数字小于两位数，则只使用存在的数字。因此序列 "\0\x\07" 指令了两个二进制 0 后跟一个
BEL 字符。如果后面的字符本身是八进制数字，请确保在最初的 0 之后提供两个数字。

处理一个后跟一个非 0 的数字的反斜线是复杂的。在一个字符类外部，PCRE 将它和后面的任何数字读取为十进制数。如果该数字小于 10，或者在表达式中至少
有那么多之前捕获的左括号，则将整个序列作为一个 反向引用 。稍后在讨论带括号的子模式之后，将对其工作原理进行描述。

在一个字符类中，或者如果该十进制数大于 9 并且没有那么多捕获的子模式，PCRE 会重读反斜杠后面最多三个八进制数字，并从该值的最低的 8 位生成一个
字节。后面的任意数字都代表它们自己。例如：

\040
    另一种写入一个空格的方法
\40
    同上，如果之前捕获的子模式少于 40 个
\7
    总是一个反向引用
\11
    可能是一个反向引用，或者另一种写入制表符的方式
\011
    总是一个制表符
\0113
    是一个制表符后跟字符 "3"
\113
    具有八进制码 113 的字符（因为反向引用不能超过 99 个）
\377
    是一个所有位都有 1 组成的字节。
\81
    要么是一个反向引用，要么是一个二进制 0 后跟两个字符 "8" 和 "1"

注意，100 或 100 以上的八进制值不能由前导零引入，因为读取的八进制数字不会超过三个。

所有定义单个字节值的序列都可以在字符类内部和外部使用。此外，在字符类中，序列 "\b" 被解释为退格字符（十六进制 08）。在字符类外，它拥有一种不同
的含义（见下文）。

反斜杠的第三种用法是用于指定通用的字符类型：

\d
    任何一个十进制数
\D
    任何一个非十进制数的字符
\h
    任何水平空白字符（从 PHP 5.2.4 开始）
\H
    任何一个非水平空白字符（从 PHP 5.2.4 开始）
\s
    任何空白字符
\S
    任何一个非空白字符
\v
    任何垂直空白字符（从 PHP 5.2.4 开始）
\V
    任何一个非垂直空白字符（从 PHP 5.2.4 开始）
\w
    任何“单词”字符
\W
    任何“非单词”字符

每对转义序列将整个字符集合划分为两个不相交的集合。任何给定的字符匹配且仅匹配每一对中的一个。

“空白”字符是 HT（9），LF（10），FF（12），CR（13）和空格（32）。但是，如果正在进行特定于区域的匹配，代码点在 128-255 范围内的字符也可能
被认为是空白字符，例如，NBSP（A0）。

“单词”字符是任何字母、数字或下划线字符，也就是说，可以是 Perl “单词” 的一部分的任何字符。字母和数字的定义由 PCRE 的字符表控制，如果发生了特
定于地区的匹配，则可能会有所不同。例如，在 "fr"（法语）区域设置中，一些码点大于 128 的字符用于表示重音字母，它们会被 \w 所匹配。

这些字符类型序列可以出现在字符类的内部和外部。它们每个会匹配适当类型的一个字符。如果当前匹配点在主题字符串的末尾，那么它们都将失败，因为没有字
符需要匹配。

反斜杠的第四种用法是用于某种简单的断言。一个断言指定了必须在匹配中的特定点满足的条件，而不消耗主题字符串中的任何字符。用于更复杂断言的子模式的
用法在后文被描述。反斜杠断言是：

\b
    单词边界
\B
    非单词边界
\A
    主题的开始（独立于多行模式）
\Z
    主题的结束或者末尾的换行（独立于多行模式）
\z
    主题的结束（独立于多行模式）
\G
    主题中第一个匹配的位置

这些断言不可以出现在字符类中（但注意，在字符类中 "\b" 拥有不同的含义，也就是退格字符）。

单词边界是主题字符串中当前字符和前一个字符不同时匹配 \w 或 \W 的位置（例如，一个匹配 \w 而另一个匹配 \W），或字符串的开始或结束，如果第一个
或最后一个字符分别的匹配 \w。

\A、\Z 和 \z 断言与传统的长音符号（^）和美元符号（$）（在 锚 中描述）的不同在于，无论设置了什么选项，它们只在主题字符串的开始和结束处匹配。
它们不受 PCRE_MULTILINE 或 PCRE_DOLLAR_ENDONLY 选项的影响。\Z 和 \z 的区别在于 \Z 会匹配为字符串最后一个字符的换行符前并且匹配字符串的
结束，而 \z 只匹配结束。

仅当当前匹配位置位于匹配的起点时，\G 断言才为真，匹配的起点由 preg_match() 的 offset 参数指定。当 offset 的值不是 0 时，它与 \A 不同。

\Q 和 \E 可用于忽略模式中的 regexp 元字符。例如：\w+\Q.$.\E$ 将匹配一个或多个单词字符，后面跟着字面字符 .$. 并在字符串的结尾下锚。

从 PHP 5.2.4 开始，\K 可以用于重置匹配的开始。例如，模式 foo\Kbar 会匹配 "foobar"，但报告它匹配的是 "bar"。使用 \K 不会干扰捕获子字符
串的设置。例如，当模式 (foo)\Kbar 匹配 "foobar" 时，第一个子字符串将仍然设置为 "foo"。
