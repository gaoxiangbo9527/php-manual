个人总结
    该函数是一个 polyfill 函数，如果系统实现了某个算法，就用系统的实现，如果系统没实现某个算法，就用 PHP 的实现。
    该函数是一个底层散列函数，功能强大而灵活，但不太适合直接使用，有很多要注意的地方，一不小心就会碰到问题，可以作为备选散列函数。
    对于各种需要散列的场景，PHP 提供了专用的函数，这些专用函数更合适。
    基于上面的陈述，所以就不翻译全部内容了，剩余未翻译的内容将来再补全吧。

警告
    这个函数不是二进制安全的。

描述
    crypt ( string $str [, string $salt ] ) : string

    crypt() 将会使用标准的 Unix 基于 DES 的算法或者其他在系统上可用的替代算法来返回一个散列后的字符串。

    salt 参数是可选的。然而，如果没有带 salt 参数，那么 crypt() 会生成一个弱散列。不带该参数，在 PHP 5.6 或更新版本中会引发一个
    E_NOTICE 错误。为了更好的安全性，请确保去指定一个足够强壮的 salt 。

    password_hash() 使用强散列，生成强 salt，并自动应用适当的 rounds 。password_hash() 仅是一个的 crypt() 的包装器并且与现有的密码
    散列相兼容。鼓励使用 password_hash() 。

    注意：从 PHP 5.3.0 开始，PHP 包含了自己的实现，如果系统缺少对一个或多个算法的支持，PHP 将使用它自己的实现。

注意事项
    注意：没有解密函数，因为 crypt() 使用的是单向算法。
